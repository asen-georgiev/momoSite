[{"/home/asen/Workspace/momoDesignSite/momo-site/src/index.js":"1","/home/asen/Workspace/momoDesignSite/momo-site/src/reportWebVitals.js":"2","/home/asen/Workspace/momoDesignSite/momo-site/src/App.js":"3","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userLoginService.js":"4","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminLoginService.js":"5","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navigation.jsx":"6","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/products.jsx":"7","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/basket.jsx":"8","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/registerUserFormUsr.jsx":"9","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userLoginForm.jsx":"10","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/registerAdminForm.jsx":"11","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userProfile.jsx":"12","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/contacts/contacts.jsx":"13","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminLoginForm.jsx":"14","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminPanel.jsx":"15","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/updateAdminForm.jsx":"16","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/allAdminsList.jsx":"17","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/allUsersList.jsx":"18","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/updateUserForm.jsx":"19","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/registerUserForm.jsx":"20","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/images/imagesUpload.jsx":"21","/home/asen/Workspace/momoDesignSite/momo-site/src/services/httpService.js":"22","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminService.js":"23","/home/asen/Workspace/momoDesignSite/momo-site/src/services/imgService.js":"24","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userService.js":"25","/home/asen/Workspace/momoDesignSite/momo-site/src/services/emailService.js":"26","/home/asen/Workspace/momoDesignSite/momo-site/src/components/product.jsx":"27","/home/asen/Workspace/momoDesignSite/momo-site/src/components/contactsMailForm.jsx":"28","/home/asen/Workspace/momoDesignSite/momo-site/src/components/userDeleteAlert.jsx":"29","/home/asen/Workspace/momoDesignSite/momo-site/src/components/usercard.jsx":"30","/home/asen/Workspace/momoDesignSite/momo-site/src/components/imagesUploadForm.jsx":"31","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/emails/allEmailsList.jsx":"32","/home/asen/Workspace/momoDesignSite/momo-site/src/components/trTdTable.jsx":"33","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navLinkComp.jsx":"34","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/updateUserFormUsr.jsx":"35","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/registerBioForm.jsx":"36","/home/asen/Workspace/momoDesignSite/momo-site/src/services/bioService.js":"37","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/allBiosList.jsx":"38","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/updateBioForm.jsx":"39","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/registerBlogForm.jsx":"40","/home/asen/Workspace/momoDesignSite/momo-site/src/services/blogService.js":"41","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/allBlogsList.jsx":"42","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/updateBlogForm.jsx":"43","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blog.jsx":"44","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blogDetails.jsx":"45","/home/asen/Workspace/momoDesignSite/momo-site/src/services/commentService.js":"46","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogCard.jsx":"47","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogComments.jsx":"48","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/comments/AllCommentsList.jsx":"49","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/registerDesignForm.jsx":"50","/home/asen/Workspace/momoDesignSite/momo-site/src/services/designService.js":"51","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/allDesignsList.jsx":"52","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/updateDesignForm.jsx":"53","/home/asen/Workspace/momoDesignSite/momo-site/src/services/paginateFunction.js":"54","/home/asen/Workspace/momoDesignSite/momo-site/src/components/paginate.jsx":"55","/home/asen/Workspace/momoDesignSite/momo-site/src/components/footer.jsx":"56","/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownComments.jsx":"57","/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownDesigns.jsx":"58","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/biography/biography.jsx":"59","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/designs/designs.jsx":"60","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/designs/designsDetails.jsx":"61","/home/asen/Workspace/momoDesignSite/momo-site/src/components/listGroupDesigns.jsx":"62","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/homepage/homepage.jsx":"63","/home/asen/Workspace/momoDesignSite/momo-site/src/components/homepageCards.jsx":"64","/home/asen/Workspace/momoDesignSite/momo-site/src/components/scrollToTop.jsx":"65"},{"size":851,"mtime":1617521877263,"results":"66","hashOfConfig":"67"},{"size":362,"mtime":1607679022000,"results":"68","hashOfConfig":"67"},{"size":6102,"mtime":1617689553275,"results":"69","hashOfConfig":"67"},{"size":929,"mtime":1617863349457,"results":"70","hashOfConfig":"67"},{"size":995,"mtime":1617689553307,"results":"71","hashOfConfig":"67"},{"size":9014,"mtime":1617691362541,"results":"72","hashOfConfig":"67"},{"size":1425,"mtime":1610572344000,"results":"73","hashOfConfig":"67"},{"size":1545,"mtime":1610572344000,"results":"74","hashOfConfig":"67"},{"size":15866,"mtime":1617433452353,"results":"75","hashOfConfig":"67"},{"size":10460,"mtime":1617601868413,"results":"76","hashOfConfig":"67"},{"size":8825,"mtime":1615115056000,"results":"77","hashOfConfig":"67"},{"size":5727,"mtime":1618381768775,"results":"78","hashOfConfig":"67"},{"size":5369,"mtime":1617026243267,"results":"79","hashOfConfig":"67"},{"size":7692,"mtime":1617689553263,"results":"80","hashOfConfig":"67"},{"size":4101,"mtime":1615539243000,"results":"81","hashOfConfig":"67"},{"size":9843,"mtime":1615115158000,"results":"82","hashOfConfig":"67"},{"size":4251,"mtime":1617950531364,"results":"83","hashOfConfig":"67"},{"size":5442,"mtime":1617691362557,"results":"84","hashOfConfig":"67"},{"size":16532,"mtime":1618150456996,"results":"85","hashOfConfig":"67"},{"size":15232,"mtime":1618150456976,"results":"86","hashOfConfig":"67"},{"size":3897,"mtime":1617691362565,"results":"87","hashOfConfig":"67"},{"size":962,"mtime":1617863349421,"results":"88","hashOfConfig":"67"},{"size":1839,"mtime":1617864088693,"results":"89","hashOfConfig":"67"},{"size":1024,"mtime":1617863349449,"results":"90","hashOfConfig":"67"},{"size":3182,"mtime":1617864088689,"results":"91","hashOfConfig":"67"},{"size":1028,"mtime":1617863349437,"results":"92","hashOfConfig":"67"},{"size":468,"mtime":1608631258000,"results":"93","hashOfConfig":"67"},{"size":3378,"mtime":1617691362609,"results":"94","hashOfConfig":"67"},{"size":1327,"mtime":1617950580460,"results":"95","hashOfConfig":"67"},{"size":1928,"mtime":1617521575314,"results":"96","hashOfConfig":"67"},{"size":620,"mtime":1617691362577,"results":"97","hashOfConfig":"67"},{"size":4872,"mtime":1615285448000,"results":"98","hashOfConfig":"67"},{"size":965,"mtime":1614755166000,"results":"99","hashOfConfig":"67"},{"size":769,"mtime":1614690466000,"results":"100","hashOfConfig":"67"},{"size":18928,"mtime":1617691362537,"results":"101","hashOfConfig":"67"},{"size":10429,"mtime":1617689553295,"results":"102","hashOfConfig":"67"},{"size":1341,"mtime":1617864088685,"results":"103","hashOfConfig":"67"},{"size":6353,"mtime":1617689553331,"results":"104","hashOfConfig":"67"},{"size":12591,"mtime":1617689720850,"results":"105","hashOfConfig":"67"},{"size":12845,"mtime":1617691362601,"results":"106","hashOfConfig":"67"},{"size":1340,"mtime":1617864088693,"results":"107","hashOfConfig":"67"},{"size":7007,"mtime":1617691362553,"results":"108","hashOfConfig":"67"},{"size":15435,"mtime":1617691362593,"results":"109","hashOfConfig":"67"},{"size":10144,"mtime":1618170724373,"results":"110","hashOfConfig":"67"},{"size":17752,"mtime":1618381846674,"results":"111","hashOfConfig":"67"},{"size":2572,"mtime":1618292589935,"results":"112","hashOfConfig":"67"},{"size":1875,"mtime":1617691362565,"results":"113","hashOfConfig":"67"},{"size":2840,"mtime":1618381768783,"results":"114","hashOfConfig":"67"},{"size":7166,"mtime":1617691362549,"results":"115","hashOfConfig":"67"},{"size":12722,"mtime":1617100159947,"results":"116","hashOfConfig":"67"},{"size":1367,"mtime":1617864088685,"results":"117","hashOfConfig":"67"},{"size":7941,"mtime":1617691362577,"results":"118","hashOfConfig":"67"},{"size":14914,"mtime":1617691362585,"results":"119","hashOfConfig":"67"},{"size":499,"mtime":1615278045000,"results":"120","hashOfConfig":"67"},{"size":2024,"mtime":1615280183000,"results":"121","hashOfConfig":"67"},{"size":4165,"mtime":1618817744852,"results":"122","hashOfConfig":"67"},{"size":1425,"mtime":1615797440000,"results":"123","hashOfConfig":"67"},{"size":1387,"mtime":1615797440000,"results":"124","hashOfConfig":"67"},{"size":3813,"mtime":1617950531352,"results":"125","hashOfConfig":"67"},{"size":5245,"mtime":1617691362573,"results":"126","hashOfConfig":"67"},{"size":5176,"mtime":1617691362589,"results":"127","hashOfConfig":"67"},{"size":1390,"mtime":1617026243267,"results":"128","hashOfConfig":"67"},{"size":4579,"mtime":1617441551349,"results":"129","hashOfConfig":"67"},{"size":4078,"mtime":1617026243267,"results":"130","hashOfConfig":"67"},{"size":249,"mtime":1617521877283,"results":"131","hashOfConfig":"67"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"1ll33bn",{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"134"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"134"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"134"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"134"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"134"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"170","usedDeprecatedRules":"134"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"134"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"134"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"134"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"134"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"134"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"134"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"134"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"134"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"201","usedDeprecatedRules":"134"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"216"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"134"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"134"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"134"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"134"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"134"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"134"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"134"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"134"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"247","usedDeprecatedRules":"134"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"134"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"134"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"134"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"134"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"134"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"134"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"134"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"134"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"134"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289","usedDeprecatedRules":"134"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},"/home/asen/Workspace/momoDesignSite/momo-site/src/index.js",[],["298","299"],"/home/asen/Workspace/momoDesignSite/momo-site/src/reportWebVitals.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/App.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/services/userLoginService.js",["300"],"import httpService from \"./httpService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/userauthent\";\nconst apiEndPoint = \"/userauthent\";\n\n//Fetching User frontend data to the sever\n//Taking the response token and storing it in localStorage so the user stayed always logged till logout\nexport function userLogin(data) {\n    return httpService\n        .post(apiEndPoint, data)\n        .then(response => {\n        if (response.data) {\n            localStorage.setItem(\"user\", response.data)\n        }\n        return response.data;\n    })\n        .catch(err => {\n            // toast.error(err.response.data);\n            return Promise.reject(err);\n        });\n}\n\n//Function for logging out the User\nexport function userLogout() {\n    localStorage.removeItem(\"user\");\n}\n\n//Function returning the currently logged User (token)\nexport function getCurrentUser() {\n    return localStorage.getItem(\"user\");\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminLoginService.js",["301"],"import httpService from \"./httpService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/adminauthent\";\nconst apiEndPoint = \"/adminauthent\";\n\n//Fetching frontend admin data (email and password) to the server\n//Taking the response token and saving it in the session storage(Login after every browser closing required);\nexport function adminLogin(data) {\n    return httpService\n        .post(apiEndPoint, data)\n        .then(response => {\n            if (response.data) {\n                sessionStorage.setItem(\"admin\", response.data);\n            }\n            return response.data;\n        })\n        .catch(err => {\n            // toast.error(err.response.data);\n            return Promise.reject(err);\n        });\n}\n\n//Function for logging out the Admin\nexport function adminLogout() {\n    sessionStorage.removeItem(\"admin\");\n}\n\n//Function returning the currently logged Admin (token)\nexport function getCurrentAdmin() {\n    return sessionStorage.getItem(\"admin\");\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navigation.jsx",["302"],"import React, {Component} from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport '../css/navigation.css'\nimport {Link, NavLink} from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faHome, faDiceD20, faPenNib, faUserFriends, faSignature} from \"@fortawesome/free-solid-svg-icons\";\nimport {getCurrentUser, userLogout} from \"../services/userLoginService\";\nimport jwtDecode from \"jwt-decode\";\nimport {picUrl} from \"../config.json\";\nimport Image from \"react-bootstrap/Image\";\nimport Button from \"react-bootstrap/Button\";\nimport {getCurrentAdmin} from \"../services/adminLoginService\";\n\n// const navbars = [\n//     {_id: 1, name: \"Home\", to: \"/\", icon: faHome},\n//     {_id: 2, name: \"Designs\", to: \"/designs\", icon: faDiceD20},\n//     {_id: 3, name: \"About us\", to: \"/about\", icon: faSignature},\n//     {_id: 4, name: \"Contacts\", to: \"/contacts\", icon: faPenNib},\n//     {_id: 5, name: \"Blog\", to: \"/blog\", icon: faUserFriends},\n// ]\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass Navigation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            admin: null,\n            isLogged: false\n        }\n    }\n\n    async componentDidMount() {\n        const jwtUser = getCurrentUser();\n        const jwtAdmin = getCurrentAdmin();\n        if (jwtUser !== null) {\n            const user = jwtDecode(jwtUser);\n            this.setState({user, isLogged: true});\n        } else {\n            this.setState({user: null});\n        }\n        if (jwtAdmin !== null) {\n            const admin = jwtDecode(jwtAdmin);\n            this.setState({admin, isLogged: true});\n        } else {\n            this.setState({admin: null});\n        }\n    }\n\n    logoutUser = () => {\n        userLogout();\n        this.setState({user: null, isLogged: false});\n    }\n\n    render() {\n        console.log(this.state);\n        return (\n            <div>\n                <header>\n                    <Navbar\n                        fixed=\"top\"\n                        className=\"app-navbar p-3 px-5\"\n                        expand=\"md\">\n                        <NavLink\n                            className=\"app-navbar-momo pb-0\"\n                            to=\"/\">\n                            MOMO DESIGN\n                        </NavLink>\n                        <Navbar.Toggle\n                            className=\"app-navbar-toggle border-0\"\n                            aria-controls=\"navbar-toggle\"/>\n                        <Navbar.Collapse id=\"navbar-toggle\">\n                            <Nav className=\"ml-auto mr-auto\">\n                                <a\n                                    id=\"Home\"\n                                    href=\"/\"\n                                    className=\"app-navbar-link\"\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faHome}\n                                        className=\"icon\"/>\n\n                                    <span className=\"Home-show\">\n                                            HOME\n                                        </span>\n\n                                    <div className=\"d-flex justify-content-center\">\n                                        <span id=\"Home-hide\" className=\"Home-hide\">\n                                            HOME\n                                        </span>\n                                    </div>\n                                </a>\n                                <a\n                                    id=\"Designs\"\n                                    href=\"/designs\"\n                                    className=\"app-navbar-link\"\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faDiceD20}\n                                        className=\"icon\"/>\n\n                                    <span className=\"Designs-show\">\n                                            DESIGNS\n                                        </span>\n\n                                    <div className=\"d-flex justify-content-center\">\n                                        <span id=\"Designs-hide\" className=\"Designs-hide\">\n                                            DESIGNS\n                                        </span>\n                                    </div>\n                                </a>\n                                <a\n                                    id=\"Bio\"\n                                    href=\"/biography\"\n                                    className=\"app-navbar-link\"\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faSignature}\n                                        className=\"icon\"/>\n\n                                    <span className=\"Bio-show\">\n                                            ABOUT US\n                                        </span>\n\n                                    <div className=\"d-flex justify-content-center\">\n                                        <span id=\"Bio-hide\" className=\"Bio-hide\">\n                                            ABOUT US\n                                        </span>\n                                    </div>\n                                </a>\n                                <a\n                                    id=\"Contacts\"\n                                    href=\"/contacts\"\n                                    className=\"app-navbar-link\"\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faPenNib}\n                                        className=\"icon\"/>\n\n                                    <span className=\"Contacts-show\">\n                                            CONTACTS\n                                        </span>\n\n                                    <div className=\"d-flex justify-content-center\">\n                                        <span id=\"Contacts-hide\" className=\"Contacts-hide\">\n                                            CONTACTS\n                                        </span>\n                                    </div>\n                                </a>\n                                <a\n                                    id=\"Blog\"\n                                    href=\"/blog\"\n                                    className=\"app-navbar-link\"\n                                >\n                                    <FontAwesomeIcon\n                                        icon={faUserFriends}\n                                        className=\"icon\"/>\n\n                                    <span className=\"Blog-show\">\n                                            BLOG\n                                        </span>\n\n                                    <div className=\"d-flex justify-content-center\">\n                                        <span id=\"Blog-hide\" className=\"Blog-hide\">\n                                            BLOG\n                                        </span>\n                                    </div>\n                                </a>\n                            </Nav>\n                        </Navbar.Collapse>\n\n                        {this.state.user === null && this.state.admin === null &&\n                        <Button\n                            className=\"login-nav-button\"\n                            href=\"/userlogin\">\n                            LOGIN\n                        </Button>}\n\n                        {this.state.user !== null &&\n                        <Row>\n                            <Nav>\n                                <Link\n                                    id=\"User\"\n                                    to=\"/userprofile\">\n                                    <Image src={pictureUrl + this.state.user.userPicture}\n                                           style={{width: '3rem', height: '3rem'}}\n                                           roundedCircle\n                                    />\n                                    <div className=\"d-flex justify-content-center\">\n                                <span id=\"User-hide\">\n                                    {this.state.user.userName}&nbsp;{this.state.user.userFamily}\n                                </span>\n                                    </div>\n                                </Link>\n                            </Nav>\n                            <Button\n                                className=\"ml-4 logout-nav-button\"\n                                onClick={this.logoutUser}\n                                href=\"/\">\n                                LOGOUT\n                            </Button>\n                        </Row>}\n\n                    </Navbar>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Navigation;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/products.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/basket.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/registerUserFormUsr.jsx",["303","304"],"import React, {Component} from 'react';\nimport '../../css/user/userRegister.css';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport Card from \"react-bootstrap/Card\";\nimport {CardImg, FormLabel} from \"react-bootstrap\";\nimport {uploadImageUser} from \"../../services/imgService\";\nimport {registerUser} from \"../../services/userService\";\nimport profile from '../../assets/profile-default.png'\n\nclass RegisterUserFormUsr extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: '',\n            userFamily: '',\n            userPassword: '',\n            userPicture: '',\n            userEmail: '',\n            userAddress: '',\n            userTelephone: '',\n            errors: {},\n            isDisabled: true,\n            showPicture: '',\n            uploadPicture: '',\n            isRegistered: false\n        }\n    }\n\n    schema = Joi.object({\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\")\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUserRegister();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if (errors) return;\n\n        if (this.state.uploadPicture === '') {\n            toast.error('You must select profile picture to upload!');\n            return;\n        }\n\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n\n        await registerUser(user);\n        toast('Successful registration!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'user-register-toaster'\n        });\n\n        const data = new FormData();\n        data.append('file', this.state.uploadPicture);\n        await uploadImageUser(data);\n        toast('Image was successfully uploaded!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'user-register-toaster'\n        });\n        console.log('User profile image was uploaded to gallery');\n\n        this.setState({isDisabled: true, isRegistered: true});\n\n    }\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        })\n    }\n\n    onImageHandler = (event) => {\n        this.setState({\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0],\n            userPicture: event.target.files[0].name,\n            isDisabled: false\n        });\n    }\n\n    validateUserRegister = () => {\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"user-register-main\" fluid={true}>\n                    <Row className=\"user-register-row-main d-flex justify-content-center\">\n                        {this.state.isRegistered === false &&\n                        <Col>\n                            <Card className=\"user-register-card\">\n                                <Form onSubmit={this.handleSubmit}>\n                                    <Row>\n                                        <Col md=\"auto\" className=\"pr-0\">\n                                            {this.state.showPicture &&\n                                            <CardImg\n                                                className=\"ml-5 mt-5\"\n                                                src={this.state.showPicture}\n                                                style={{width: 330, height: 'auto'}}/>\n                                            }\n                                            {!this.state.showPicture &&\n                                            <CardImg\n                                                className=\"ml-5 mt-5\"\n                                                src={profile}\n                                                style={{width: 330, height: 'auto'}}/>\n                                            }\n                                            <FormGroup className=\"pl-5 pt-4\">\n                                                <Form.File\n                                                    className=\"user-register-form\"\n                                                    id=\"image\"\n                                                    name=\"image\"\n                                                    label={this.state.errors.userPicture && \"You must select image for profile picture\"\n                                                    || \"Select image for profile picture\"}\n                                                    onChange={this.onImageHandler}/>\n                                            </FormGroup>\n                                        </Col>\n\n                                        <Col className=\"pl-0\">\n                                            <FormGroup className=\"px-5 pt-5\">\n                                                {this.state.errors.userName &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userName}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    autoFocus={true}\n                                                    name=\"userName\"\n                                                    type=\"text\"\n                                                    value={this.state.userName}\n                                                    placeholder=\"Please enter your first name\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userFamily &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userFamily}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    name=\"userFamily\"\n                                                    type=\"text\"\n                                                    value={this.state.userFamily}\n                                                    placeholder=\"Please enter your second name\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userAddress &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userAddress}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    name=\"userAddress\"\n                                                    type=\"text\"\n                                                    value={this.state.userAddress}\n                                                    placeholder=\"Please enter your address : country / city / street / postal code\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userEmail &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userEmail}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    name=\"userEmail\"\n                                                    type=\"email\"\n                                                    value={this.state.userEmail}\n                                                    placeholder=\"Please enter your e-mail\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userTelephone &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userTelephone}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    name=\"userTelephone\"\n                                                    type=\"text\"\n                                                    value={this.state.userTelephone}\n                                                    placeholder=\"Please enter your personal telephone\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userPassword &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userPassword}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-register-form-control\"\n                                                    name=\"userPassword\"\n                                                    type=\"password\"\n                                                    value={this.state.userPassword}\n                                                    placeholder=\"Please enter your password : min. 8 symbols\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n                                    <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                        <Col md={4}>\n                                            <Button\n                                                className=\"user-register-register-button\"\n                                                type=\"submit\"\n                                                disabled={this.state.isDisabled}>\n                                                REGISTER\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"d-flex justify-content-end\">\n                                            <Button\n                                                className=\"user-register-redirect-button\"\n                                                href=\"/userlogin\">\n                                                BACK TO LOGIN PAGE\n                                            </Button>\n                                        </Col>\n                                    </Row>\n                                </Form>\n                            </Card>\n                        </Col>\n                        }\n\n                        {this.state.isRegistered &&\n                        <Card className=\"user-register-card2\">\n                            <Card.Title\n                                className=\"user-register-welcome text-center\">\n                                WELCOME!\n                            </Card.Title>\n                            <Card.Subtitle\n                                className=\"user-register-names text-center\">\n                                ASEN GEORGIEV\n                            </Card.Subtitle>\n                            <CardImg\n                                src={this.state.showPicture}\n                                style={{width: 330, height: 365}}/>\n                            <Card.Body className=\"d-flex justify-content-center\">\n                                <Button\n                                    className=\"user-register-profile-button\"\n                                    href=\"/userprofile\">\n                                    GO TO YOUR PROFILE\n                                </Button>\n                            </Card.Body>\n                        </Card>\n                        }\n\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterUserFormUsr;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userLoginForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/registerAdminForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userProfile.jsx",["305"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {getCurrentUser, userLogout} from \"../../services/userLoginService\";\nimport jwtDecode from \"jwt-decode\";\nimport {picUrl} from \"../../config.json\";\nimport Usercard from \"../../components/usercard\";\nimport '../../css/user/userProfile.css'\nimport {deleteUser} from \"../../services/userService\";\nimport UserDeleteAlert from \"../../components/userDeleteAlert\";\nimport {Link} from \"react-router-dom\";\nimport {deleteCommentUser, getCommentsByUser} from \"../../services/commentService\";\nimport BlogComments from \"../../components/blogComments\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass UserProfile extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loggedUser: [],\n            comments: [],\n            url: '',\n            showAlert: false,\n            isLogged: false\n        }\n    }\n\n    async componentDidMount() {\n        const url = pictureUrl;\n        const jwtUser = getCurrentUser();\n        const loggedUser = jwtDecode(jwtUser);\n        const {data: comments} = await getCommentsByUser(loggedUser._id)\n        this.setState({loggedUser, url, comments, isLogged: true});\n    }\n\n    handleDelete = async (user) => {\n        const usr = this.state.loggedUser;\n        this.setState({loggedUser: []});\n        try {\n            await deleteUser(user._id)\n            userLogout();\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log('User with the given ID was not found');\n            toast.error('This user has already been deleted!');\n            this.setState({loggedUser: usr});\n        }\n    }\n\n\n    showAlert = (boolean) => {\n        window.scrollTo({top: 0});\n        this.setState({showAlert: boolean})\n    }\n\n\n    handleDeleteComment = async (comment) => {\n        const allComments = this.state.comments;\n        const comments = allComments.filter(c => c._id !== comment._id);\n        this.setState({comments});\n\n        try{\n            await deleteCommentUser(comment._id);\n            toast(`Your comment was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'user-profile-toaster'\n            });\n        } catch (e) {\n            if(e.response && e.response.status === 404) console.log(\"Comment with the given ID was not found!\");\n            toast.error(\"This comment has already been deleted\");\n            this.setState({comments: allComments});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"user-profile-main\" fluid={true}>\n                    <Row className=\"justify-content-center user-profile-alert-row\">\n                        <UserDeleteAlert\n                            heading=\"Are you sure you want to delete your profile?\"\n                            showAlert={this.state.showAlert}\n                            buttonYes=\"YES, I want\"\n                            buttonNo=\"NO, it was a mistake\"\n                            onYes={() => this.handleDelete(this.state.loggedUser)}\n                            onNo={() => this.showAlert(false)}\n                            buttonYesVariant=\"info\"\n                            buttonNoVariant=\"danger\"/>\n                    </Row>\n                    <Row>\n                        <Col className=\"user-profile-col-card\">\n                            <Usercard\n                                src={this.state.url + this.state.loggedUser.userPicture}\n                                loggedUser={this.state.loggedUser}/>\n                        </Col>\n                        <Col className=\"user-profile-col-comm pb-4\">\n                            <Row className=\"user-profile-rowspan justify-content-center\">\n                                <span>\n                                    MY COMMENTS\n                                </span>\n                            </Row>\n                            <Row>\n                                <Col\n                                    className=\"overflow-auto\"\n                                    style={{height: 630}}>\n                                    <BlogComments\n                                        comments={this.state.comments}\n                                        user={this.state.loggedUser}\n                                        deleteComment={this.handleDeleteComment}/>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"user-profile-update text-center p-5\">\n                            <Link\n                                className=\"user-profile-update-link\"\n                                to={`/userprofile/${this.state.loggedUser._id}`}>\n                                UPDATE PROFILE\n                            </Link>\n                        </Col>\n                        <Col className=\"user-profile-delete text-center p-5\">\n                            <Link\n                                className=\"user-profile-delete-link\"\n                                onClick={() => this.showAlert(true)}>\n                                DELETE PROFILE\n                            </Link>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UserProfile;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/contacts/contacts.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminLoginForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminPanel.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/updateAdminForm.jsx",["306"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Joi from \"joi\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport \"../../css/admin/adminUpdate.css\";\nimport {getAdmin, updateAdmin} from \"../../services/adminService\";\n\nclass UpdateAdminForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            admin: {\n                adminName: \"\",\n                adminEmail: \"\",\n                adminPassword: \"\",\n                isAdmin: false\n            },\n            errors: {},\n            isDisabled: true\n        }\n\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        adminName: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Admin Name\"),\n        adminEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Admin Email\"),\n        adminPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .label(\"Admin Password\"),\n        isAdmin: Joi.boolean()\n            .label(\"Is Admin\")\n    });\n\n\n    handleChange = (event) => {\n        const admin = {...this.state.admin};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        admin [name] = value;\n        this.setState({\n            admin,\n            isDisabled: false\n        })\n    }\n\n\n    async populateAdmin() {\n        try {\n            const adminId = this.props.match.params.id;\n            const {data: admin} = await getAdmin(adminId);\n            this.setState({admin: this.mapToViewModel(admin)});\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log('There is no Admin with the given ID!');\n        }\n    }\n\n    async componentDidMount() {\n        await this.populateAdmin();\n    }\n\n    mapToViewModel(admin) {\n        return {\n            _id: admin._id,\n            adminName: admin.adminName,\n            adminEmail: admin.adminEmail,\n            // adminPassword: admin.adminPassword,\n            isAdmin: admin.isAdmin\n        };\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateAdminInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        const admin = {\n            adminName: this.state.admin.adminName,\n            adminEmail: this.state.admin.adminEmail,\n            adminPassword: this.state.admin.adminPassword,\n            isAdmin: this.state.admin.isAdmin\n        };\n\n        await updateAdmin(admin, this.state.admin._id);\n        this.setState({isDisabled: true});\n        toast('Admin update was successful!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-toaster'\n        });\n    }\n\n\n    validateAdminInput = () => {\n        const admin = {\n            adminName: this.state.admin.adminName,\n            adminEmail: this.state.admin.adminEmail,\n            adminPassword: this.state.admin.adminPassword,\n            isAdmin: this.state.admin.isAdmin\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(admin, options);\n        console.log(result);\n\n        if (!result.error) return null;\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/adminslist\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-main-container\" fluid={true}>\n                    <Container className=\"update-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-span\">Update admin :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <FormGroup className=\"px-5 pt-4\">\n                                            {this.state.errors.adminName &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminName}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                autoFocus={true}\n                                                id=\"adminName\"\n                                                name=\"adminName\"\n                                                type=\"text\"\n                                                value={this.state.admin.adminName}\n                                                placeholder=\"Enter Admin's name\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.adminEmail &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminEmail}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                id=\"adminEmail\"\n                                                name=\"adminEmail\"\n                                                type=\"email\"\n                                                value={this.state.admin.adminEmail}\n                                                placeholder=\"Enter Admin's email\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.adminPassword &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminPassword}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                id=\"adminPassword\"\n                                                name=\"adminPassword\"\n                                                type=\"password\"\n                                                value={this.state.admin.adminPassword}\n                                                placeholder=\"Enter Admin's password\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            <FormCheck\n                                                className=\"update-checkbox\"\n                                                id=\"isAdmin\"\n                                                name=\"isAdmin\"\n                                                type=\"checkbox\"\n                                                checked={this.state.admin.isAdmin}\n                                                value={this.state.admin.isAdmin}\n                                                label=\"User will have Admin rights\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-5 py-2 d-flex justify-content-between\">\n                                            <Col>\n                                                <Button\n                                                    className=\"update-update-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE ADMIN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMINS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateAdminForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/allAdminsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/allUsersList.jsx",["307"],"import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport Container from \"react-bootstrap/Container\";\nimport {toast} from \"react-toastify\";\nimport {picUrl} from \"../../config.json\";\nimport {Link} from \"react-router-dom\";\nimport {deleteUserAdmin, getAllUsers} from \"../../services/userService\";\nimport Image from \"react-bootstrap/Image\";\nimport \"../../css/admin/user/userAllList.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {paginateFunction} from \"../../services/paginateFunction\";\nimport Paginate from \"../../components/paginate\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass AllUsersList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            users: [],\n            usersPerPage: 3,\n            currentPage: 1\n        }\n    }\n\n    async componentDidMount() {\n        const {data: users} = await getAllUsers();\n        this.setState({users});\n        console.log(this.state.users);\n    }\n\n    handleDelete = async (user) => {\n        const allUsers = this.state.users;\n        const users = allUsers.filter(u => u._id !== user._id);\n        this.setState({users});\n\n        try {\n            await deleteUserAdmin(user._id);\n        } catch (error) {\n            if (error.response && error.response.status === 404)\n                console.log(\"User with the given ID was not found\");\n            toast.error(\"This user has already been deleted\");\n            this.setState({users: allUsers});\n        }\n    }\n\n\n    handlePageChange = (pageNumber) => {\n        this.setState({currentPage: pageNumber});\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n\n        const paginatedUsers = paginateFunction(this.state.users, this.state.usersPerPage, this.state.currentPage);\n\n        return (\n            <div>\n                <Container className=\"userlist-main-container\" fluid={true}>\n                    <Container className=\"userlist-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <Col className=\"userlist-span-col\">\n                            <span className=\"userlist-span\">All registered Users :</span>\n                            </Col>\n                            <Col className=\"userlist-span-col d-flex justify-content-end\">\n                            <Paginate\n                                className=\"m-0\"\n                                itemsCount={this.state.users.length}\n                                itemsPerPage={this.state.usersPerPage}\n                                currentPage={this.state.currentPage}\n                                onPageChange={this.handlePageChange}/>\n                            </Col>\n                        </Row>\n                        <Table responsive hover className=\"userlist-table\">\n                            <thead className=\"userlist-thead\">\n                            <tr>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Picture</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"userlist-tbody\">\n                            {paginatedUsers.map(usr => {\n                                return (\n                                    <tr key={usr._id}>\n                                        <td>{usr.userName} {usr.userFamily}</td>\n                                        <td>{usr.userEmail}</td>\n                                        <td>\n                                            <Image\n                                                src={pictureUrl + usr.userPicture}\n                                                width=\"100\"\n                                                height=\"100\"/>\n                                        </td>\n                                        <td>\n                                            <Link\n                                                className=\"userlist-link\"\n                                                to={`/admin/userslist/${usr._id}`}>\n                                                Update user\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Button\n                                                className=\"userlist-delete-button\"\n                                                onClick={() => this.handleDelete(usr)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Button\n                            className=\"userlist-redirect-button\"\n                            onClick={this.adminRedirect}>\n                            BACK TO ADMIN PANEL\n                        </Button>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AllUsersList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/updateUserForm.jsx",["308","309"],"import React, {Component} from 'react';\nimport Joi from \"joi\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel, Image} from \"react-bootstrap\";\nimport {picUrl} from \"../../config.json\";\nimport {getUserAdmin, updateUserAdmin} from \"../../services/userService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/user/userUpdate.css\"\nimport CardImg from \"react-bootstrap/CardImg\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass UpdateUserForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                userName: \"\",\n                userFamily: \"\",\n                userEmail: \"\",\n                userPassword: \"\",\n                userAddress: \"\",\n                userTelephone: \"\",\n                userPicture: \"\"\n            },\n            uploadPicture: null,\n            showPicture: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\")\n    })\n\n\n    async componentDidMount() {\n        const url = pictureUrl;\n        await this.populateUser();\n        this.setState({url: url})\n        console.log(this.state);\n    }\n\n\n    populateUser = async () => {\n        try {\n            const userId = this.props.match.params.id;\n            const {data: user} = await getUserAdmin(userId);\n            this.setState({user: this.mapToViewModel(user)});\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log(\"There is no user with the given ID!\");\n        }\n    }\n\n    handleImage = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = event.target.files[0].name;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0]\n        });\n    }\n\n    handleChange = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            isDisabled: false\n        });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUser();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPicture !== null) {\n            const data = new FormData();\n            data.append('file', this.state.uploadPicture);\n            await uploadImageAdmin(data);\n            toast(\"New image successfully uploaded!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-user-toaster'\n            });\n        }\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture\n        };\n        await updateUserAdmin(user, this.state.user._id);\n        this.setState({isDisabled: true});\n        toast(\"User was successfully updated!\", {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-user-toaster'\n        });\n\n\n    }\n\n    mapToViewModel = (user) => {\n        return {\n            _id: user._id,\n            userName: user.userName,\n            userFamily: user.userFamily,\n            userEmail: user.userEmail,\n            userAddress: user.userAddress,\n            userTelephone: user.userTelephone,\n            userPicture: user.userPicture\n        };\n    }\n\n    validateUser = () => {\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture\n        };\n\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {}\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/userslist\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-user-main-container\" fluid={true}>\n                    <Container className=\"update-user-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-user-span\">Update user :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-user-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row>\n                                            <Col md=\"auto\" className=\"pr-0\">\n                                                {this.state.showPicture === null &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.url + this.state.user.userPicture}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                {this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.showPicture}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                <FormGroup className=\"px-5 pt-4\">\n                                                    <Form.File\n                                                        className=\"update-user-form\"\n                                                        id=\"image\"\n                                                        name=\"userPicture\"\n                                                        label={this.state.errors.userPicture || \"Change the profile picture\"}\n                                                        onChange={this.handleImage}/>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col className=\"pl-0\">\n                                                <FormGroup className=\"px-5 pt-5\">\n                                                    {this.state.errors.userName &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userName}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        autoFocus={true}\n                                                        name=\"userName\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userName}\n                                                        placeholder=\"Enter user's first name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userFamily &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userFamily}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userFamily\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userFamily}\n                                                        placeholder=\"Enter user's second name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userAddress &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userAddress}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userAddress\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userAddress}\n                                                        placeholder=\"Enter user's address: country / city / street / postal code\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userEmail &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userEmail}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userEmail\"\n                                                        type=\"email\"\n                                                        value={this.state.user.userEmail}\n                                                        placeholder=\"Enter user's e-mail address\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userTelephone &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userTelephone}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userTelephone\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userTelephone}\n                                                        placeholder=\"Enter user's telephone ex (+ or 0)359123456789\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userPassword &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userPassword}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userPassword\"\n                                                        type=\"password\"\n                                                        value={this.state.user.userPassword}\n                                                        placeholder=\"Enter user's password : min. 8 symbols\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-user-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE USER\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-user-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO USERS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateUserForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/registerUserForm.jsx",["310","311"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport \"../../css/admin/user/userRegister.css\"\nimport {CardImg, FormLabel} from \"react-bootstrap\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport {registerUserAdmin} from \"../../services/userService\";\nimport profile from '../../assets/profile-default.png'\n\nclass RegisterUserForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: '',\n            userFamily: '',\n            userPassword: '',\n            userPicture: '',\n            userEmail: '',\n            userAddress: '',\n            userTelephone: '',\n            errors: {},\n            isDisabled: true,\n            showPicture: '',\n            uploadPicture: ''\n        }\n    }\n\n    schema = Joi.object({\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\")\n    })\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        });\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUserInput();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if (errors) return;\n\n        this.setState({isDisabled: true});\n\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n\n        await registerUserAdmin(user);\n        toast('User was successfully registered!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-user-toaster'\n        });\n\n        const data = new FormData();\n        data.append('file', this.state.uploadPicture);\n        await uploadImageAdmin(data);\n        toast('Image was successfully uploaded!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-user-toaster'\n        });\n        console.log('User profile image was uploaded to gallery');\n    }\n\n\n    validateUserInput = () => {\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    onImageHandler = (event) => {\n        this.setState({\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0],\n            userPicture: event.target.files[0].name,\n            isDisabled: false\n        })\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-user-main-container\" fluid={true}>\n                    <Container className=\"register-user-sub-container container-lg\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"register-user-span\">Register new User :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-user-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row>\n                                            <Col md=\"auto\" className=\"pr-0\">\n                                                {this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.showPicture}\n                                                    style={{width: 330, height: 365}}/>\n                                                }\n                                                {!this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={profile}\n                                                    style={{width: 330, height: 365}}/>\n                                                }\n                                                <FormGroup className=\"pl-5 pt-4\">\n                                                    <Form.File\n                                                        className=\"register-user-form\"\n                                                        id=\"image\"\n                                                        name=\"image\"\n                                                        label={this.state.errors.userPicture && \"You must select image for profile picture\"\n                                                        || \"Select image for profile picture\"}\n                                                        onChange={this.onImageHandler}/>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col className=\"pl-0\">\n                                                <FormGroup className=\"px-5 pt-5\">\n                                                    {this.state.errors.userName &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userName}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        autoFocus={true}\n                                                        name=\"userName\"\n                                                        type=\"text\"\n                                                        value={this.state.userName}\n                                                        placeholder=\"Enter user's first name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userFamily &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userFamily}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userFamily\"\n                                                        type=\"text\"\n                                                        value={this.state.userFamily}\n                                                        placeholder=\"Enter user's second name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userAddress &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userAddress}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userAddress\"\n                                                        type=\"text\"\n                                                        value={this.state.userAddress}\n                                                        placeholder=\"Enter user's address: country / city / street / postal code\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userEmail &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userEmail}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userEmail\"\n                                                        type=\"email\"\n                                                        value={this.state.userEmail}\n                                                        placeholder=\"Enter user's e-mail address\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userTelephone &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userTelephone}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userTelephone\"\n                                                        type=\"text\"\n                                                        value={this.state.userTelephone}\n                                                        placeholder=\"Enter user's telephone number\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userPassword &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userPassword}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userPassword\"\n                                                        type=\"password\"\n                                                        value={this.state.userPassword}\n                                                        placeholder=\"Enter user's password : min. 8 symbols\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-user-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    REGISTER USER\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-user-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterUserForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/images/imagesUpload.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/services/httpService.js",["312"],"import axios from \"axios\";\nimport {toast} from \"react-toastify\";\n\n//Setting .env variable for the development and production process.\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n//General intercepting the responses from the API and returning success or error.\naxios.interceptors.response.use(success => {\n    console.log(success);\n    return (success);\n}, error => {\n    const expectedError = error.response &&\n        error.response.status >= 400 &&\n        error.response.status < 500;\n    if (expectedError) {\n        console.log(error.response.data);\n        toast.error(error.response.data, {\n            position: \"top-center\",\n            className: 'http-toaster'\n        });\n    }\n    if (!expectedError) {\n        console.log(error);\n        toast.error('An Unexpected error occured!');\n    }\n    return Promise.reject(error);\n});\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminService.js",["313"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/admins\";\nconst apiEndPoint = \"/admins\";\n\nfunction adminUrl(adminId) {\n    return `${apiEndPoint}/${adminId}`;\n}\n\n\n//Retrieving single Admin object from DB - admin rights only.\nexport function getAdmin(adminId) {\n    return httpService\n        .get(adminUrl(adminId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n\n\n//Retrieving all the Admin objects from the DB - admin rights only.\nexport function getAllAdmins() {\n    return httpService\n        .get(apiEndPoint, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Creating Admin object in DB - admin rights only.\nexport function registerAdmin(admin) {\n    return httpService\n        .post(apiEndPoint, admin,{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Updating single Admin object - admin rights only.\nexport function updateAdmin(admin, adminId) {\n    const body = {...admin};\n    return httpService\n        .put(adminUrl(adminId), body, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Deleting single Admin object - admin rights only.\nexport function deleteAdmin(adminId) {\n    return httpService\n        .delete(adminUrl(adminId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n\n\n//Retrieving the currently logged Admin - admin rights only.\nexport function loggedAdmin(){\n    return httpService\n        .get(apiEndPoint+\"/adm\",{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/imgService.js",["314"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/images\";\nconst apiEndPoint = \"/images\";\n\n//Uploading Image(s) to the gallery in the backend API - admin rights only\nexport function uploadImageAdmin(data){\n    return httpService\n        .post(apiEndPoint, data, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n        .then(response => {\n            console.log(response.statusText)\n        });\n}\n\n//Uploading Image to the gallery in the backend API - no token needed.\n//Because the case of User registration process.\nexport function uploadImageUser(data){\n    return httpService\n        .post(apiEndPoint,data);\n}\n\n\n//Retrieving all Images from gallery - admin rights only.\nexport function getImages(){\n    return httpService\n        .get(apiEndPoint,{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userService.js",["315"],"import httpService from \"./httpService\";\nimport {toast} from \"react-toastify\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\nimport {getCurrentUser} from \"./userLoginService\";\n\n//While in working process:\n// const apiEndPoint = apiUrl + \"/users\";\n\n//Before deploying finished app:\nconst apiEndPoint = \"/users\";\n\nfunction userUrl(userId){\n    return `${apiEndPoint}/${userId}`;\n}\n\n//Register single User object in DB - no token needed.\nexport function registerUser(user){\n    return httpService\n        .post(apiEndPoint,user)\n        .then(response => {\n            if (response.data) {\n                localStorage.setItem(\"user\", response.data)\n            }\n            return response.data;\n        })\n        .catch(err => {\n            toast.error(err.response.data);\n            return Promise.reject(err);\n        });\n}\n\n//Register single User object in DB - admin rights only.\nexport function registerUserAdmin(user){\n    return httpService\n        .post(apiEndPoint,user,{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Retrieving single User object from DB - admin rights only.\nexport function getUserAdmin(userId){\n    return httpService\n        .get(userUrl(userId),{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Retrieving single User object from DB - user rights only.\nexport function getUserUser(userId){\n    return httpService\n        .get(userUrl(userId),{\n            headers:{\n                'x-auth-token': getCurrentUser()\n            }\n        });\n}\n\n\n//Retrieving all the User objects from DB - admin rights only.\nexport function getAllUsers(){\n    return httpService\n        .get(apiEndPoint,{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Updating single User object - user rights only.\nexport function updateUser(user, userId){\n    const body = {...user};\n    return httpService\n        .put(userUrl(userId), body,{\n            headers:{\n                'x-auth-token': getCurrentUser()\n            }\n        });\n}\n\n\n//Updating user password with automatically generated password in case of forgetting.\nexport function updateUserPassword(userEmail){\n    const body = {...userEmail}\n    return httpService\n        .put(apiEndPoint+\"/pass/update\",body);\n}\n\n\n//Updating single User object - admin rights only.\nexport function updateUserAdmin(user, userId){\n    const body = {...user};\n    return httpService\n        .put(userUrl(userId), body,{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\n//Deleting single User object - user rights only.\nexport function deleteUser(userId){\n    return httpService\n        .delete(userUrl(userId),{\n            headers:{\n                'x-auth-token': getCurrentUser()\n            }\n        });\n}\n\n\n//Deleting single User object admin rights only.\nexport function deleteUserAdmin(userId){\n    return httpService\n        .delete(userUrl(userId),{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/emailService.js",["316"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/emails\";\nconst apiEndPoint = \"/emails\";\n\nfunction emailUrl(id){\n    return `${apiEndPoint}/${id}`;\n}\n\n//Creating email object, sendind through SendGrid - no token needed.\nexport function sendEmail(email){\n    return httpService\n        .post(apiEndPoint, email)\n        .then(res => console.log(res.data))\n        .catch(error => console.log(error))\n}\n\n//Retrieving all the Email objects from DB - admin rights only.\nexport function getAllEmails(){\n    return httpService\n        .get(apiEndPoint, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Deleting single Email object from DB - admin rights only.\nexport function deleteEmail(emailId){\n    return httpService\n        .delete(emailUrl(emailId),{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/product.jsx",["317"],"import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\n\nclass Product extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <span>{this.props.product.name}</span>\n                <Button onClick={()=>this.props.onBuy(this.props.product)} disabled={this.props.product.selected}>Buy</Button>\n            </div>\n        );\n    }\n}\n\nexport default Product;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/contactsMailForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/userDeleteAlert.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/usercard.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/imagesUploadForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/emails/allEmailsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/trTdTable.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/navLinkComp.jsx",[],["318","319"],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/updateUserFormUsr.jsx",["320","321"],"import React, {Component} from 'react';\nimport Joi from \"joi\";\nimport _ from 'lodash';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel, Image} from \"react-bootstrap\";\nimport {picUrl} from \"../../config.json\";\nimport {getUserUser, updateUser} from \"../../services/userService\";\nimport {uploadImageUser} from \"../../services/imgService\";\nimport {userLogout} from \"../../services/userLoginService\";\nimport \"../../css/user/userUpdate.css\";\nimport CardImg from \"react-bootstrap/CardImg\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass UpdateUserFormUsr extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                userName: \"\",\n                userFamily: \"\",\n                userEmail: \"\",\n                userPassword: \"\",\n                userAddress: \"\",\n                userTelephone: \"\",\n                userPicture: \"\",\n                repeatedPassword: ''\n            },\n            uploadPicture: null,\n            showPicture: null,\n            errors: {},\n            isDisabled: true,\n            isUpdated: true\n        }\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\"),\n        repeatedPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Repeated password\"),\n    })\n\n\n    async componentDidMount() {\n        const url = pictureUrl;\n        await this.populateUser();\n        this.setState({url: url});\n        console.log(this.state);\n    }\n\n\n    populateUser = async () => {\n        try {\n            const userId = this.props.match.params.id;\n            const {data: user} = await getUserUser(userId);\n            this.setState({user: this.mapToViewModel(user)});\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log(\"There is no user with the given ID!\");\n        }\n    }\n\n\n    handleImage = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = event.target.files[0].name;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0],\n            isDisabled: false,\n            isUpdated: false\n        });\n    }\n\n\n    handleChange = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            isDisabled: false,\n            isUpdated: false\n        });\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUser();\n        this.setState({\n            errors: errors || {}\n        });\n        if (errors) return;\n\n        const result = _.isEqual(this.state.user.userPassword, this.state.user.repeatedPassword);\n        if (result !== true) {\n            toast(\"Your passwords did not match!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'user-update-toaster-error'\n            });\n            return;\n        }\n\n        if (this.state.uploadPicture !== null) {\n            const data = new FormData();\n            data.append('file', this.state.uploadPicture);\n            await uploadImageUser(data);\n        }\n\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture\n        };\n        await updateUser(user, this.state.user._id);\n        this.setState({isUpdated: true});\n        toast(\"Your profile was successfully updated!\", {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'user-update-toaster'\n        });\n        userLogout();\n        setTimeout(function (){window.location.href = \"/userlogin\";},1500);\n    }\n\n\n    mapToViewModel = (user) => {\n        return {\n            _id: user._id,\n            userName: user.userName,\n            userFamily: user.userFamily,\n            userEmail: user.userEmail,\n            userAddress: user.userAddress,\n            userTelephone: user.userTelephone,\n            userPicture: user.userPicture\n        };\n    }\n\n\n    validateUser = () => {\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture,\n            repeatedPassword: this.state.user.repeatedPassword\n        };\n\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {}\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    userRedirect = () => {\n        this.props.history.push(\"/userprofile\");\n    }\n\n    // logoutUser = () => {\n    //     userLogout();\n    //     // this.props.history.push(\"/userlogin\");\n    // }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"user-update-main\" fluid={true}>\n                    <Row className=\"user-update-row-main d-flex justify-content-center\">\n                        <Col>\n                            <Card className=\"user-update-card\">\n                                <Form onSubmit={this.handleSubmit}>\n                                    <Row>\n\n                                        <Col md=\"auto\" className=\"pr-0\">\n                                            {this.state.showPicture === null &&\n                                            <CardImg\n                                                className=\"ml-5 mt-5\"\n                                                src={this.state.url + this.state.user.userPicture}\n                                                style={{width: 330, height: 'auto'}}/>\n                                            }\n                                            {this.state.showPicture &&\n                                            <CardImg\n                                                className=\"ml-5 mt-5\"\n                                                src={this.state.showPicture}\n                                                style={{width: 330, height: 'auto'}}/>\n                                            }\n                                            <FormGroup\n                                                className=\"pl-5 pt-4\">\n                                                <Form.File\n                                                    className=\"user-register-form\"\n                                                    id=\"image\"\n                                                    name=\"userPicture\"\n                                                    label=\"You can change your profile picture\"\n                                                    onChange={this.handleImage}/>\n                                                {this.state.errors.userPicture &&\n                                                <p className=\"text-danger pt-2\">\n                                                    {this.state.errors.userPicture}\n                                                </p>}\n                                            </FormGroup>\n                                        </Col>\n\n                                        <Col className=\"pl-0\">\n                                            <FormGroup className=\"px-5 pt-5\">\n                                                {this.state.errors.userName &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userName}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    autoFocus={true}\n                                                    name=\"userName\"\n                                                    type=\"text\"\n                                                    value={this.state.user.userName}\n                                                    placeholder=\"Please enter your first name\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userFamily &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userFamily}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"userFamily\"\n                                                    type=\"text\"\n                                                    value={this.state.user.userFamily}\n                                                    placeholder=\"Please enter your second name\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userAddress &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userAddress}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"userAddress\"\n                                                    type=\"text\"\n                                                    value={this.state.user.userAddress}\n                                                    placeholder=\"Please enter your address: country / city / street / postal code\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userEmail &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userEmail}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"userEmail\"\n                                                    type=\"email\"\n                                                    value={this.state.user.userEmail}\n                                                    placeholder=\"Please enter your e-mail address\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userTelephone &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userTelephone}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"userTelephone\"\n                                                    type=\"text\"\n                                                    value={this.state.user.userTelephone}\n                                                    placeholder=\"Please enter your telephone number\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.userPassword &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.userPassword}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"userPassword\"\n                                                    type=\"password\"\n                                                    value={this.state.user.userPassword}\n                                                    placeholder=\"Please enter your password: min. 8 symbols\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n\n                                            <FormGroup className=\"px-5 pt-2\">\n                                                {this.state.errors.repeatedPassword &&\n                                                <FormLabel className=\"text-danger\">\n                                                    {this.state.errors.repeatedPassword}\n                                                </FormLabel>}\n                                                <FormControl\n                                                    className=\"user-update-form-control\"\n                                                    name=\"repeatedPassword\"\n                                                    type=\"password\"\n                                                    value={this.state.repeatedPassword}\n                                                    placeholder=\"Please confirm your password: min. 8 symbols\"\n                                                    onChange={this.handleChange}/>\n                                            </FormGroup>\n                                        </Col>\n                                    </Row>\n\n                                    <Row className=\"px-5 py-4 \">\n                                        <Col>\n                                            <Button\n                                                className=\"user-update-button\"\n                                                type=\"submit\"\n                                                disabled={this.state.isUpdated}>\n                                                UPDATE PROFILE\n                                            </Button>\n                                        </Col>\n                                        <Col className=\"row text-center\">\n                                            <span className=\"user-update-span\">\n                                            *After UPDATE you will be redirected to LOGIN page!\n                                        </span>\n                                        </Col>\n                                        <Col className=\"d-flex justify-content-end\">\n                                            <Button\n                                                disabled={!this.state.isDisabled}\n                                                className=\"user-update-redirect-button\"\n                                                onClick={this.userRedirect}>\n                                                BACK TO PROFILE\n                                            </Button>\n                                            {/*{!this.state.isDisabled &&*/}\n                                            {/*<Button*/}\n                                            {/*    className=\"user-update-redirect-button\"*/}\n                                            {/*    href=\"/userlogin\">*/}\n                                            {/*    TO USER LOGIN*/}\n                                            {/*</Button>*/}\n                                            {/*}*/}\n                                        </Col>\n                                    </Row>\n                                </Form>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateUserFormUsr;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/registerBioForm.jsx",["322","323"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {createBio} from \"../../services/bioService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/bios/bioRegister.css\";\n\nclass RegisterBioForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bioTitle: '',\n            bioText: '',\n            bioPictures: [],\n            errors: {},\n            isDisabled: true,\n            showPictures: [],\n            uploadPictures: null\n        }\n    }\n\n    schema = Joi.object({\n        bioTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Bio title'),\n        bioText: Joi.string()\n            .required()\n            .min(10)\n            .max(1024)\n            .trim(true)\n            .label('Bio text'),\n        bioPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Bio pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBioInput();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if (errors) return;\n\n        const bio = {\n            bioTitle: this.state.bioTitle,\n            bioText: this.state.bioText,\n            bioPictures: this.state.bioPictures\n        }\n        await createBio(bio);\n        toast('New Bio was successfully created!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-bio-toaster'\n        });\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            this.setState({\n                isDisabled: true\n            });\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'register-bio-toaster'\n            });\n        }\n        console.log(this.state);\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const showFiles = [];\n            const bioFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                bioFiles.push(event.target.files[i].name);\n            }\n            this.setState({\n                bioPictures: bioFiles,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        });\n    }\n\n\n    maxSelectedFiles = (event) => {\n\n        let files = event.target.files;\n        if (files.length > 3) {\n            toast(\"Only 3 images can be uploaded at a time\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-bio-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateBioInput = () => {\n        const bio = {\n            bioTitle: this.state.bioTitle,\n            bioText: this.state.bioText,\n            bioPictures: this.state.bioPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(bio, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-bio-main-container\" fluid={true}>\n                    <Container className=\"register-bio-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"register-bio-span\">Create new Biography :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-bio-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={sp}/>\n                                                )\n                                            })\n                                            }\n                                        </Row>\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            {/*<FormLabel htmlFor=\"images\">*/}\n                                            {/*    Upload images :*/}\n                                            {/*</FormLabel>*/}\n                                            <Form.File\n                                                className=\"register-bio-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"images\"\n                                                label={this.state.errors.bioPictures && \"You need to select images to upload!\"\n                                                || \"Maximum images allowed to upload : 3\"}\n                                                multiple\n                                                onChange={this.handleImages}\n                                            />\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.bioTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioTitle}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"register-bio-form-control\"\n                                                autoFocus={true}\n                                                name=\"bioTitle\"\n                                                type=\"text\"\n                                                value={this.state.bioTitle}\n                                                placeholder=\"Enter title for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.bioText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioText}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"register-bio-form-control\"\n                                                name=\"bioText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.bioText}\n                                                placeholder=\"Enter text for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-bio-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    CREATE BIOGRAPHY\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-bio-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterBioForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/bioService.js",["324"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/bios\";\nconst apiEndPoint = \"/bios\";\n\nfunction bioUrl(id) {\n    return `${apiEndPoint}/${id}`;\n}\n\n//Creating single Biography object - admin rights only.\nexport function createBio(bio) {\n    return httpService\n        .post(apiEndPoint, bio, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Retieving all the Biogaphy objects from DB - no token needed.\nexport function getBios() {\n    return httpService\n        .get(apiEndPoint);\n}\n\n//Retrieving single Biography object from DB - no token needed.\nexport function getBio(bioId) {\n    return httpService\n        .get(bioUrl(bioId));\n}\n\n//Updating single Biography object - admin rights only.\nexport function updateBio(bio, bioId) {\n    const body = {...bio};\n    return httpService\n        .put(bioUrl(bioId), body, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Deleting single Biography object - admin rights only.\nexport function deleteBio(bioId) {\n    return httpService\n        .delete(bioUrl(bioId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/allBiosList.jsx",["325"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport {Button, Image} from \"react-bootstrap\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {Link} from \"react-router-dom\";\nimport {picUrl} from \"../../config.json\";\nimport \"../../css/admin/bios/bioAllList.css\";\nimport {deleteBio, getBios} from \"../../services/bioService\";\nimport {paginateFunction} from \"../../services/paginateFunction\";\nimport Paginate from \"../../components/paginate\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass AllBiosList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bios: [],\n            biosPerPage: 3,\n            currentPage: 1\n        }\n    }\n\n    async componentDidMount() {\n        const {data: bios} = await getBios();\n        this.setState({bios});\n        console.log(this.state.bios);\n    }\n\n\n    handleDelete = async (bio) => {\n        const allBios = this.state.bios;\n        const bios = allBios.filter(b => b._id !== bio._id);\n        this.setState({bios});\n\n        try {\n            toast(`Bio : ${bio.bioTitle} was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'biolist-toaster'\n            });\n            await deleteBio(bio._id);\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log(\"Bio with the given ID was not found!\");\n            toast.error(\"This Bio has already been deleted!\");\n            this.setState({bios: allBios});\n        }\n    }\n\n    handlePageChange = (pageNumber) => {\n        this.setState({currentPage: pageNumber});\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n\n        const paginatedBios = paginateFunction(this.state.bios, this.state.biosPerPage,this.state.currentPage);\n\n        return (\n            <div>\n                <Container className=\"biolist-main-container\" fluid={true}>\n                    <Container className=\"biolist-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <Col className=\"biolist-span-col\">\n                            <span className=\"biolist-span\">All created Biographies :</span>\n                            </Col>\n                            <Col className=\"biolist-span-col d-flex justify-content-end\">\n                                <Paginate\n                                    className=\"m-0\"\n                                    itemsCount={this.state.bios.length}\n                                    itemsPerPage={this.state.biosPerPage}\n                                    currentPage={this.state.currentPage}\n                                    onPageChange={this.handlePageChange}/>\n                            </Col>\n                        </Row>\n                        <Table responsive hover className=\"biolist-table\">\n                            <thead className=\"biolist-thead\">\n                            <tr>\n                                <th>Title</th>\n                                <th>Text</th>\n                                <th>Pictures</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"biolist-tbody\">\n                            {paginatedBios.map(bio => {\n                                return (\n                                    <tr key={bio._id}>\n                                        <td>{bio.bioTitle}</td>\n                                        <td>\n                                            <div\n                                                className=\"overflow-auto\"\n                                                style={{height: 150}}>\n                                                {bio.bioText}\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <Row className=\"justify-content-center\">\n                                                {bio.bioPictures.map(bp => {\n                                                    return (\n                                                        <Image\n                                                            src={pictureUrl + bp}\n                                                            width=\"70\"\n                                                            height=\"70\"\n                                                            className=\"m-1\"/>\n                                                    )\n                                                })}\n                                            </Row>\n                                        </td>\n                                        <td>\n                                            <Link\n                                                className=\"biolist-link\"\n                                                to={`/admin/bioslist/${bio._id}`}>\n                                                Update\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Button\n                                                className=\"biolist-delete-button\"\n                                                onClick={() => this.handleDelete(bio)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Button\n                            className=\"biolist-redirect-button\"\n                            onClick={this.adminRedirect}>\n                            BACK TO ADMIN PANEL\n                        </Button>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AllBiosList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/updateBioForm.jsx",["326"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getBio, updateBio} from \"../../services/bioService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/bios/bioUpdate.css\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass UpdateBioForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bio: {\n                bioTitle: '',\n                bioText: '',\n                bioPictures: []\n            },\n            showPictures: null,\n            uploadPictures: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        bioTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Bio title'),\n        bioText: Joi.string()\n            .required()\n            .min(10)\n            .max(1024)\n            .trim(true)\n            .label('Bio text'),\n        bioPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Bio pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBioInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-bio-toaster'\n            });\n        }\n\n        const bio = {\n            bioTitle: this.state.bio.bioTitle,\n            bioText: this.state.bio.bioText,\n            bioPictures: this.state.bio.bioPictures\n        }\n        toast('Biography update was successful!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-bio-toaster'\n        });\n        await updateBio(bio, this.state.bio._id);\n\n        this.setState({\n            isDisabled: true\n        });\n\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const bio = {...this.state.bio};\n            const name = event.target.name;\n            const showFiles = [];\n            const bioFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                bioFiles.push(event.target.files[i].name);\n            }\n            bio[name] = bioFiles;\n            this.setState({\n                bio,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n    maxSelectedFiles = (event) => {\n\n        let files = event.target.files;\n        if (files.length > 3) {\n            toast(\"Only 3 images can be uploaded at a time\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-bio-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    handleChange = (event) => {\n        const bio = {...this.state.bio};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        bio[name] = value;\n        this.setState({\n            bio,\n            isDisabled: false\n        });\n    }\n\n\n    async componentDidMount() {\n        await this.populateBio();\n        console.log(this.state.bio);\n    }\n\n\n    async populateBio() {\n        try {\n            const bioId = this.props.match.params.id;\n            const {data: bio} = await getBio(bioId);\n            this.setState({\n                bio: this.mapToViewModel(bio)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Bio with the given ID');\n        }\n    }\n\n\n    mapToViewModel(bio) {\n        return {\n            _id: bio._id,\n            bioTitle: bio.bioTitle,\n            bioText: bio.bioText,\n            bioPictures: bio.bioPictures\n        }\n    }\n\n\n    validateBioInput = () => {\n        const bio = {\n            _id: this.state.bio._id,\n            bioTitle: this.state.bio.bioTitle,\n            bioText: this.state.bio.bioText,\n            bioPictures: this.state.bio.bioPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(bio, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/bioslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-bio-main-container\" fluid={true}>\n                    <Container className=\"update-bio-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-bio-span\">Update Biography :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-bio-div-form\">\n\n                                    {/*{this.state.showPictures === null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Current bio pictures :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    {/*{this.state.showPictures !== null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Updated bio pictures waiting for upload :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    <Form onSubmit={this.handleSubmit}>\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.bio.bioPictures.map(bp => {\n                                                return (\n                                                    <CardImg\n                                                        key={bp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={pictureUrl + bp}/>\n                                                )\n                                            })}\n                                        </Row>\n                                        }\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>\n                                        }\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"update-bio-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"bioPictures\"\n                                                label=\"Maximum images allowed to upload : 3\"\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.bioTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioTitle}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-bio-form-control\"\n                                                autoFocus={true}\n                                                name=\"bioTitle\"\n                                                type=\"text\"\n                                                value={this.state.bio.bioTitle}\n                                                placeholder=\"Enter title for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.bioText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioText}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-bio-form-control\"\n                                                name=\"bioText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.bio.bioText}\n                                                placeholder=\"Enter text for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-bio-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE BIOGRAPHY\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-bio-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO BIOS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateBioForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/registerBlogForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/services/blogService.js",["327"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/blogs\";\nconst apiEndPoint = \"/blogs\";\n\nfunction blogUrl(id) {\n    return `${apiEndPoint}/${id}`;\n}\n\n//Create single Blog object - admin rights only.\nexport function createBlog(blog) {\n    return httpService\n        .post(apiEndPoint, blog, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Retrieving all the Blog objects from DB - no token needed.\nexport function getBlogs() {\n    return httpService\n        .get(apiEndPoint);\n}\n\n//Retrieving single Blog object from the DB - no token needed.\nexport function getBlog(blogId) {\n    return httpService\n        .get(blogUrl(blogId));\n}\n\n//Updating single Blog object - admin rights only.\nexport function updateBlog(blog, blogId) {\n    const body = {...blog};\n    return httpService\n        .put(blogUrl(blogId), body,{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Deleting single Blog object - admin rights only.\nexport function deleteBlog(blogId) {\n    return httpService\n        .delete(blogUrl(blogId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/allBlogsList.jsx",["328"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport {Button, Image} from \"react-bootstrap\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {Link} from \"react-router-dom\";\nimport {picUrl} from \"../../config.json\";\nimport {deleteBlog, getBlogs} from \"../../services/blogService\";\nimport \"../../css/admin/blogs/blogAllList.css\";\nimport Paginate from \"../../components/paginate\";\nimport {paginateFunction} from \"../../services/paginateFunction\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass AllBlogsList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blogs: [],\n            blogsPerPage: 3,\n            currentPage: 1\n        }\n    }\n\n\n    async componentDidMount() {\n        const {data: blogs} = await getBlogs();\n        this.setState({blogs});\n        console.log(this.state.blogs);\n    }\n\n\n    handleDelete = async (blog) => {\n        const allBlogs = this.state.blogs;\n        const blogs = allBlogs.filter(b => b._id !== blog._id);\n        this.setState({blogs});\n        try {\n            await deleteBlog(blog._id);\n            toast(`Blog : ${blog.blogTitle} was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'bloglist-toaster'\n            });\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log('Blog with the given ID was not found');\n            toast.error(\"This Blog has already been deleted!\");\n            this.setState({blogs: allBlogs});\n        }\n    }\n\n\n    handlePageChange = (pageNumber) => {\n        this.setState({\n            currentPage: pageNumber\n        });\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n\n        const paginatedBlogs = paginateFunction(this.state.blogs, this.state.blogsPerPage, this.state.currentPage);\n\n        return (\n            <div>\n                <Container className=\"bloglist-main-container\" fluid={true}>\n                    <Container className=\"bloglist-sub-container\">\n                        <Row className=\"m-0\">\n                            <Col className=\"bloglist-span-col\">\n                                <span className=\"bloglist-span\">All created Blogs :</span>\n                            </Col>\n                            <Col className=\"biolist-span-col d-flex justify-content-end\">\n                                <Paginate\n                                    className=\"m-0\"\n                                    itemsCount={this.state.blogs.length}\n                                    itemsPerPage={this.state.blogsPerPage}\n                                    currentPage={this.state.currentPage}\n                                    onPageChange={this.handlePageChange}/>\n                            </Col>\n                        </Row>\n                        <Table responsive hover className=\"bloglist-table\">\n                            <thead className=\"bloglist-thead\">\n                            <tr>\n                                <th>Title</th>\n                                <th>Sub Title</th>\n                                <th>Date</th>\n                                <th>Text</th>\n                                <th>Pictures</th>\n                                <th>Link</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"bloglist-tbody\">\n                            {paginatedBlogs.map(blog => {\n                                return (\n                                    <tr key={blog._id}>\n                                        <td>{blog.blogTitle}</td>\n                                        <td>\n                                            <div\n                                                className=\"overflow-auto\"\n                                                style={{height: 250}}>\n                                                {blog.blogSubTitle}\n                                            </div>\n                                        </td>\n                                        <td>{new Date(blog.blogDate).toLocaleString()}</td>\n                                        <td>\n                                            <div\n                                                className=\"overflow-auto\"\n                                                style={{height: 250}}>\n                                                {blog.blogText}\n                                            </div>\n                                        </td>\n                                        <td>\n                                            {blog.blogPictures.map(bp => {\n                                                return (\n                                                    <Image\n                                                        key={bp}\n                                                        src={pictureUrl + bp}\n                                                        width=\"70\"\n                                                        height=\"70\"\n                                                        className=\"m-1\"/>\n                                                )\n                                            })}\n                                        </td>\n                                        <td>{blog.blogLink}</td>\n                                        <td>\n                                            <Link\n                                                className=\"bloglist-link\"\n                                                to={`/admin/blogslist/${blog._id}`}>\n                                                Update\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Button\n                                                className=\"bloglist-delete-button\"\n                                                onClick={() => this.handleDelete(blog)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Button\n                            className=\"bloglist-redirect-button\"\n                            onClick={this.adminRedirect}>\n                            BACK TO ADMIN PANEL\n                        </Button>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n};\n\nexport default AllBlogsList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/updateBlogForm.jsx",["329"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getBlog, updateBlog} from \"../../services/blogService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/blogs/blogUpdate.css\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass UpdateBlogForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blog: {\n                blogTitle: '',\n                blogSubTitle: '',\n                blogText: '',\n                blogPictures: [],\n                blogLink: ''\n            },\n            showPictures: null,\n            uploadPictures: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        blogTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Blog title'),\n        blogSubTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(200)\n            .trim(true)\n            .label('Blog sub title'),\n        blogText: Joi.string()\n            .required()\n            .min(20)\n            .max(5000)\n            .trim(true)\n            .label('Blog text'),\n        blogPictures: Joi.array()\n            .items(Joi.string())\n            .allow('')\n            .label('Blog pictures'),\n        blogLink: Joi.string()\n            .min(5)\n            .max(50)\n            .allow('')\n            .label('Blog link')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBlogInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-blog-toaster'\n            });\n        }\n\n        const blog = {\n            blogTitle: this.state.blog.blogTitle,\n            blogSubTitle: this.state.blog.blogSubTitle,\n            blogText: this.state.blog.blogText,\n            blogPictures: this.state.blog.blogPictures,\n            blogLink: this.state.blog.blogLink\n        }\n        toast('Blog update was successful', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-blog-toaster'\n        });\n        this.setState({\n            isDisabled: true\n        });\n        await updateBlog(blog, this.state.blog._id);\n\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const blog = {...this.state.blog};\n            const name = event.target.name;\n            const showFiles = [];\n            const blogFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                blogFiles.push(event.target.files[i].name);\n            }\n            blog[name] = blogFiles;\n            this.setState({\n                blog,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const blog = {...this.state.blog};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        blog[name] = value;\n\n        this.setState({\n            blog,\n            isDisabled: false\n        });\n    }\n\n\n    async componentDidMount() {\n        await this.populateBlog();\n        console.log(this.state.blog);\n    }\n\n\n    async populateBlog() {\n        try {\n            const blogId = this.props.match.params.id;\n            const {data: blog} = await getBlog(blogId);\n            this.setState({\n                blog: this.mapToViewModel(blog)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Blog with the given ID');\n        }\n    }\n\n\n    mapToViewModel(blog) {\n        return {\n            _id: blog._id,\n            blogTitle: blog.blogTitle,\n            blogSubTitle: blog.blogSubTitle,\n            blogText: blog.blogText,\n            blogPictures: blog.blogPictures,\n            blogLink: blog.blogLink\n        }\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 5) {\n            toast(\"Only 5 images can be uploaded at a time!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-blog-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateBlogInput = () => {\n        const blog = {\n            _id: this.state.blog._id,\n            blogTitle: this.state.blog.blogTitle,\n            blogSubTitle: this.state.blog.blogSubTitle,\n            blogText: this.state.blog.blogText,\n            blogPictures: this.state.blog.blogPictures,\n            blogLink: this.state.blog.blogLink\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(blog, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/blogslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-blog-main-container\" fluid={true}>\n                    <Container className=\"update-blog-sub-container\">\n                        <Row className=\"m-0\">\n                            <span className=\"update-blog-span\">Update Blog :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-bio-div-form\">\n\n                                    {/*{this.state.showPictures === null &&*/}\n                                    {/*<Card.Header className=\"update-blog-span m-0\">*/}\n                                    {/*    <span>Current blog pictures :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    {/*{this.state.showPictures !== null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Updated blog pictures waiting for upload :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.blog.blogPictures.map(bp => {\n                                                return (\n                                                    <CardImg\n                                                        key={bp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={pictureUrl + bp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"register-blog-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"blogPictures\"\n                                                label={this.state.errors.blogPictures\n                                                || \"Maximum images allowed to upload : 5 (not mandatory)\"}\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.blogTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                autoFocus={true}\n                                                name=\"blogTitle\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogTitle}\n                                                placeholder=\"Enter title for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogSubTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogSubTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogSubTitle\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogSubTitle}\n                                                placeholder=\"Enter short expose for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.blog.blogText}\n                                                placeholder=\"Enter main text for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogLink &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogLink}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogLink\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogLink}\n                                                placeholder=\"Enter link to additional info (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-blog-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE BLOG\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-blog-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO BLOGS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateBlogForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blog.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blogDetails.jsx",["330","331","332","333"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Joi from \"joi\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport _ from \"lodash\";\nimport {Link} from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {getBlog} from \"../../services/blogService\";\nimport {picUrl} from \"../../config.json\";\nimport {createComment, getCommentsByBlog, deleteCommentUser, updateCommentUser} from \"../../services/commentService\";\nimport BlogCard from \"../../components/blogCard\";\nimport Image from 'react-bootstrap/Image'\nimport BlogComments from \"../../components/blogComments\";\nimport {getCurrentUser} from \"../../services/userLoginService\";\nimport jwtDecode from \"jwt-decode\";\nimport \"../../css/blog/blogDetails.css\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass BlogDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blog: '',\n            comments: [],\n            comment: {\n                commentText: '',\n                userId: '',\n                blogId: ''\n            },\n            user: {},\n            updatedComment: {\n                _id: '',\n                commentText: '',\n                user: {\n                    _id: '',\n                    userName: '',\n                    userFamily: '',\n                    userEmail: '',\n                    userPicture: '',\n                    userPassword: '',\n                    userAddress: '',\n                    userTelephone: ''\n                },\n                blog: ''\n            },\n            errors: {},\n            isDisabled: true,\n            isUpdated: false,\n            updateButton: true\n        }\n    }\n\n    schema = Joi.object({\n        commentText: Joi.string()\n            .min(10)\n            .max(1000)\n            .required()\n            .label(\"Comment text\"),\n        userId: Joi.string()\n            .required(),\n        blogId: Joi.string()\n            .required()\n    });\n\n    updatedSchema = Joi.object({\n        commentText: Joi.string()\n            .min(10)\n            .max(1000)\n            .required()\n            .label(\"Comment text\"),\n        user: Joi.object()\n            .keys({\n                _id: Joi.string(),\n                userName: Joi.string()\n                    .required()\n                    .min(3)\n                    .max(30)\n                    .trim(true)\n                    .label(\"First name\"),\n                userFamily: Joi.string()\n                    .required()\n                    .min(3)\n                    .max(30)\n                    .trim(true)\n                    .label(\"Second name\"),\n                userPassword: Joi.string()\n                    .required()\n                    .min(8)\n                    .max(255)\n                    .trim(true)\n                    .label(\"Password\"),\n                userEmail: Joi.string()\n                    .required()\n                    .min(5)\n                    .max(50)\n                    .trim(true)\n                    .label(\"Email\"),\n                userPicture: Joi.string()\n                    .required()\n                    .min(5)\n                    .max(100)\n                    .label(\"Profile picture\"),\n                userAddress: Joi.string()\n                    .required()\n                    .min(5)\n                    .max(100)\n                    .trim(true)\n                    .label(\"Address\"),\n                userTelephone: Joi.string()\n                    .required()\n                    .min(5)\n                    .max(50)\n                    .trim(true)\n                    .label(\"Personal telephone\")\n            }),\n        blog: Joi.string()\n            .required()\n    })\n\n\n    async componentDidMount() {\n        const blogId = this.props.match.params.id;\n        const {data: blog} = await getBlog(blogId);\n        const {data: comments} = await getCommentsByBlog(blogId);\n        const jwtUser = getCurrentUser();\n        if (jwtUser !== null) {\n            const user = jwtDecode(jwtUser);\n            this.setState({user});\n            console.log(user);\n        }\n        this.setState({\n            blog,\n            comments\n        });\n\n        console.log(this.state.blog);\n    }\n\n    handleKeyPress = async (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            const errors = this.validateCommentInput();\n            this.setState({errors: errors || {}});\n            if (errors) return;\n\n            const comment = {\n                commentText: this.state.comment.commentText,\n                userId: this.state.user._id,\n                blogId: this.props.match.params.id\n            };\n            await createComment(comment);\n            toast('Your comment was successfully posted', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'blogdetails-toaster'\n            });\n\n            const blogId = this.props.match.params.id;\n            const {data: comments} = await getCommentsByBlog(blogId);\n\n            const emptyComment = {\n                commentText: '',\n                userId: '',\n                blogId: ''\n            }\n\n            this.setState({\n                comments,\n                comment: emptyComment\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const comment = {};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        comment [name] = value;\n        this.setState({\n            comment\n        })\n    }\n\n\n    validateCommentInput = () => {\n        const blogId = this.props.match.params.id;\n        const comment = {\n            commentText: this.state.comment.commentText,\n            userId: this.state.user._id,\n            blogId: blogId\n        }\n        const options = {abortEarly: false};\n        const result = this.schema.validate(comment, options);\n        console.log(result);\n\n        if (!result.error) return null;\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    validateUpdatedComment = () => {\n        const updatedComment = {\n            commentText: this.state.updatedComment.commentText,\n            user: {\n                _id: this.state.updatedComment.user._id,\n                userName: this.state.updatedComment.user.userName,\n                userFamily: this.state.updatedComment.user.userFamily,\n                userEmail: this.state.updatedComment.user.userEmail,\n                userPicture: this.state.updatedComment.user.userPicture,\n                userPassword: this.state.updatedComment.user.userPassword,\n                userAddress: this.state.updatedComment.user.userAddress,\n                userTelephone: this.state.updatedComment.user.userTelephone\n            },\n            blog: this.state.updatedComment.blog\n        }\n        const options = {abortEarly: false};\n        const result = this.updatedSchema.validate(updatedComment, options);\n        console.log(result);\n\n        if (!result.error) return null;\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    handleDeleteComment = async (comment) => {\n        const allComments = this.state.comments;\n        const comments = allComments.filter(c => c._id !== comment._id);\n        this.setState({comments});\n\n        try {\n            await deleteCommentUser(comment._id);\n            toast(`Your comment was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'blogdetails-toaster'\n            });\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log(\"Comment with the given ID was not found!\");\n            toast.error(\"This comment has already been deleted\");\n            this.setState({comments: allComments});\n        }\n    }\n\n\n    handleUpdateKeyPress = async(event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            const errors = this.validateUpdatedComment();\n            this.setState({errors: errors || {}});\n            if (errors) return;\n\n            const comment = {\n                commentText: this.state.updatedComment.commentText,\n                user: {\n                    _id: this.state.updatedComment.user._id,\n                    userName: this.state.updatedComment.user.userName,\n                    userFamily: this.state.updatedComment.user.userFamily,\n                    userEmail: this.state.updatedComment.user.userEmail,\n                    userPicture: this.state.updatedComment.user.userPicture,\n                    userPassword: this.state.updatedComment.user.userPassword,\n                    userAddress: this.state.updatedComment.user.userAddress,\n                    userTelephone: this.state.updatedComment.user.userTelephone\n                },\n                blog: this.state.updatedComment.blog\n            }\n            toast('Your comment was successfully updated!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'blogdetails-toaster'\n            });\n            // const comments = _(this.state.comments).keyBy('_id').set(comment._id,comment).values().value();\n            // this.setState({\n            //     comments,\n            //     isUpdated: false});\n            const blogId = this.props.match.params.id;\n             setTimeout(function () {\n                        window.location.href = `/blog/${blogId}`;\n                    }, 1500);\n             await updateCommentUser(comment, this.state.updatedComment._id);\n\n        }\n    }\n\n\n    handleUpdateComment = (comment) => {\n        const updatedComment = {\n            _id: comment._id,\n            commentText: comment.commentText,\n            user: {\n                _id: comment.user._id,\n                userName: comment.user.userName,\n                userFamily: comment.user.userFamily,\n                userEmail: comment.user.userEmail,\n                userPicture: comment.user.userPicture,\n                userPassword: comment.user.userPassword,\n                userAddress: comment.user.userAddress,\n                userTelephone: comment.user.userTelephone\n            },\n            blog: comment.blog\n        }\n        this.setState({\n            updatedComment: updatedComment,\n            isUpdated: true\n        });\n    }\n\n\n    handleUpdateChange = (event) => {\n        const updatedComment = {...this.state.updatedComment};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        updatedComment [name] = value;\n        this.setState({\n            updatedComment\n        });\n    }\n\n    // registerRedirect = () => {\n    //     this.props.history.push(\"/userlogin\");\n    // }\n\n\n    render() {\n        console.log(this.state.updatedComment);\n        return (\n            <div>\n                <Container className=\"blogdetails-main\" fluid={true}>\n                    <Row>\n                        <Col className=\"blogdetails-card-col\">\n                            <BlogCard\n                                className=\"blogdetails-card m-4\"\n                                items={this.state.blog}/>\n                        </Col>\n                    </Row>\n\n                    <Row className=\"blogdetails-links-row\">\n                        <Col\n                            style={{height: 150}}\n                            className=\"blogdetails-links-col1 d-flex flex-column text-center justify-content-center\">\n                            <Link\n                                className=\"blogdetails-links-return\"\n                                to=\"/blog\">\n                                I WANT TO RETURN TO BLOG PAGE\n                            </Link>\n                        </Col>\n                        {!this.state.user._id &&\n                        <Col\n                            className=\"blogdetails-links-col2 d-flex flex-column text-center justify-content-center\"\n                            style={{height: 150}}>\n                            <Link\n                                className=\"blogdetails-links-comment\"\n                                to=\"/userlogin\">\n                                I WANT TO LEAVE A COMMENT\n                            </Link>\n                        </Col>}\n                    </Row>\n                    {this.state.user._id &&\n                        <React.Fragment>\n                            {!this.state.isUpdated &&\n                    <Row>\n                        <Col className=\"blogdetails-comment-col\">\n                            <Card className=\"m-4 blogdetails-comment-card\">\n                                <Card.Body className=\"d-flex flex-row\">\n                                    <Image\n                                        src={pictureUrl + this.state.user.userPicture}\n                                        style={{width: '5rem', height: '5rem'}}\n                                        roundedCircle/>\n                                    <Col>\n                                        <Form onKeyPress={this.handleKeyPress}>\n                                            <FormGroup>\n                                                <FormControl\n                                                    className=\"blogdetails-comment-formcontrol\"\n                                                    autoFocus={true}\n                                                    name=\"commentText\"\n                                                    as=\"textarea\"\n                                                    rows=\"3\"\n                                                    value={this.state.comment.commentText}\n                                                    placeholder=\"You can leave your comment here...\"\n                                                    onChange={this.handleChange}/>\n                                                {this.state.errors.commentText &&\n                                                <p className=\"text-danger pt-2\">\n                                                    {this.state.errors.commentText}\n                                                </p>}\n                                            </FormGroup>\n                                        </Form>\n                                    </Col>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>  }\n                        </React.Fragment>}\n                    {this.state.isUpdated &&\n                    <Row>\n                        <Col className=\"blogdetails-comment-col\">\n                            <Card className=\"m-4 blogdetails-comment-card\">\n                                <Card.Body className=\"d-flex flex-row\">\n                                    <Image\n                                        src={pictureUrl + this.state.user.userPicture}\n                                        style={{width: '5rem', height: '5rem'}}\n                                        roundedCircle/>\n                                    <Col>\n                                        <Form onKeyPress={this.handleUpdateKeyPress}>\n                                            <FormGroup>\n                                                <FormControl\n                                                    className=\"blogdetails-comment-formcontrol\"\n                                                    autoFocus={true}\n                                                    name=\"commentText\"\n                                                    as=\"textarea\"\n                                                    rows=\"3\"\n                                                    value={this.state.updatedComment.commentText}\n                                                    placeholder=\"You can leave your comment here...\"\n                                                    onChange={this.handleUpdateChange}/>\n                                                {this.state.errors.commentText &&\n                                                <p className=\"text-danger pt-2\">\n                                                    {this.state.errors.commentText}\n                                                </p>}\n                                            </FormGroup>\n                                        </Form>\n                                    </Col>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>}\n                    {this.state.comments &&\n                    <Row>\n                        <Col className=\"blogdetails-comments-col\">\n                            <BlogComments\n                                updateButton={this.state.updateButton}\n                                user={this.state.user}\n                                comments={this.state.comments}\n                                deleteComment={this.handleDeleteComment}\n                                updateComment={this.handleUpdateComment}\n                            />\n                        </Col>\n                    </Row>}\n                </Container>\n            </div>\n        );\n    }\n};\n\nexport default BlogDetails;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/commentService.js",["334"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {getCurrentUser} from \"./userLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/comments\";\n// const apiBlogEndPoint = apiUrl + \"/comments/by-blog\";\n// const apiUserEndPoint = apiUrl + \"/comments/by-user\";\n\nconst apiEndPoint = \"/comments\";\nconst apiBlogEndPoint = \"/comments/by-blog\";\nconst apiUserEndPoint = \"/comments/by-user\";\n\nfunction commentUrl(id) {\n    return `${apiEndPoint}/${id}`;\n}\n\nfunction byBlogUrl(id) {\n    return `${apiBlogEndPoint}/${id}`;\n}\n\nfunction byUserUrl(id) {\n    return `${apiUserEndPoint}/${id}`;\n}\n\n\n//Creating single Comment object - user rights only.\nexport function createComment(comment) {\n    return httpService\n        .post(apiEndPoint, comment, {\n            headers: {\n                'x-auth-token': getCurrentUser()\n            }\n        });\n}\n\n//Retrieving all Comment objects from DB - admin rights only.\nexport function getComments() {\n    return httpService\n        .get(apiEndPoint, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Retrieving single Comment object\nexport function getComment(commentId) {\n    return httpService\n        .get(commentUrl(commentId));\n}\n\n//Retrieving all the Comment objects by Blog ID - no token needed.\nexport function getCommentsByBlog(blogId) {\n    return httpService\n        .get(byBlogUrl(blogId));\n}\n\n//Retrieving all the Comment objects by User ID - user rights only.\nexport function getCommentsByUser(userId) {\n    return httpService\n        .get(byUserUrl(userId), {\n            headers: {\n                'x-auth-token': getCurrentUser()\n            }\n        })\n}\n\n//Deleting single Comment object - admin rights only.\nexport function deleteComment(commentId){\n    return httpService\n        .delete(commentUrl(commentId),{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n\n//Deleting single Comment object - user rights only\nexport function deleteCommentUser(commentId){\n    return httpService\n        .delete(commentUrl(commentId),{\n            headers: {\n                'x-auth-token': getCurrentUser()\n            }\n        })\n}\n\n//Updating single Comment object - users rights only\nexport function updateCommentUser(comment, commentId){\n    const body = {...comment};\n    return httpService\n        .put(commentUrl(commentId),body,{\n            headers: {\n                'x-auth-token': getCurrentUser()\n            }\n        })\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogCard.jsx",["335"],"import React from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport {Link} from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../config.json\";\nimport \"../css/blog/blogDetails.css\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nfunction BlogCard(props) {\n\n    const {items, className} = props;\n    return (\n        <React.Fragment>\n            <Card className={className}>\n                <Card.Header>\n                    Date : {new Date(items.blogDate).toLocaleString()}\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title className=\"blogdetails-card-title\">\n                        {items.blogTitle}\n                    </Card.Title>\n                    {items.blogPictures &&\n                    <Row className=\"justify-content-center\">\n                        {items.blogPictures.map(bp => {\n                            return (\n                                <CardImg\n                                    key={bp}\n                                    className=\"m-2 blogdetails-card-image\"\n                                    src={pictureUrl + bp}/>\n                            )\n                        })}\n                    </Row>}\n                    <Card.Text\n                        className=\"mt-4\">\n                        {items.blogText}\n                    </Card.Text>\n                </Card.Body>\n                {items.blogLink &&\n                <Card.Footer>\n                    <Link\n                        className=\"blogdetails-card-link\"\n                        to={items.blogLink}>\n                        Additional info you can find interesting : {items.blogLink}\n                    </Link>\n                </Card.Footer>}\n            </Card>\n        </React.Fragment>\n    );\n}\n\nexport default BlogCard;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogComments.jsx",["336"],"import React from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\nimport {picUrl} from \"../config.json\";\nimport Col from \"react-bootstrap/Col\";\nimport \"../css/blog/blogDetails.css\";\nimport Button from \"react-bootstrap/Button\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nfunction BlogComments(props) {\n    const {comments, user, deleteComment, updateComment,updateButton} = props;\n\n    return (\n        <React.Fragment>\n            <Card className=\"blogdetails-comments-card m-4\">\n                {comments.map(comment => {\n                    return (\n                        <Card.Body className=\"d-flex flex-row blogdetails-comments-cardbody\"\n                                   key={comment._id}>\n                            <Image\n                                src={pictureUrl + comment.user.userPicture}\n                                style={{width: '5rem', height: '5rem'}}\n                                roundedCircle/>\n                            <Col>\n                                <Card.Title className=\"blogdetails-comments-cardtitle\">\n                                    {comment.user.userName} {comment.user.userFamily}\n                                </Card.Title>\n                                <Card.Text>\n                                    {comment['commentText']}\n                                </Card.Text>\n                                {comment.user._id === user._id ?\n                                    <Button\n                                        className=\"blogdetails-delete-button\"\n                                        onClick={() => deleteComment(comment)}>\n                                        DELETE COMMENT\n                                    </Button> :\n                                    <React.Fragment>\n                                    </React.Fragment>\n                                }\n                                {comment.user._id === user._id ?\n                                    <React.Fragment>\n                                        {updateButton &&\n                                        <Button\n                                            className=\"blogdetails-update-button\"\n                                            onClick={() => updateComment(comment)}>\n                                            UPDATE COMMENT\n                                        </Button>\n                                        }\n                                    </React.Fragment> :\n                                    <React.Fragment>\n                                    </React.Fragment>\n                                }\n                            </Col>\n                        </Card.Body>\n                    )\n                })}\n            </Card>\n        </React.Fragment>\n    );\n}\n\nexport default BlogComments;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/comments/AllCommentsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/registerDesignForm.jsx",["337","338"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport {createDesign} from \"../../services/designService\";\nimport \"../../css/admin/designs/designRegister.css\"\n\nconst designTypes = [\n    {_id: 1, type: 'photography'},\n    {_id: 2, type: 'graphic design'},\n    {_id: 3, type: 'prepress'}\n];\n\nclass RegisterDesignForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designTitle: '',\n            designText: '',\n            designPictures: '',\n            designType: '',\n            errors: {},\n            isDisabled: true,\n            showPictures: [],\n            uploadPictures: null\n        }\n    }\n\n    schema = Joi.object({\n        designTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Design title'),\n        designText: Joi.string()\n            .allow('')\n            .min(10)\n            .max(200)\n            .trim(true)\n            .label('Design text'),\n        designPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Design pictures'),\n        designType: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .label('Design type')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateDesignInput();\n        this.setState({\n            errors: errors || {}\n        });\n        console.log(errors);\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'register-design-toaster'\n            });\n        }\n\n        const design = {\n            designTitle: this.state.designTitle,\n            designText: this.state.designText,\n            designPictures: this.state.designPictures,\n            designType: this.state.designType\n        }\n        await createDesign(design);\n        toast('New Design was successfully created!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-design-toaster'\n        });\n\n        this.setState({\n            isDisabled: true\n        });\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const designFiles = [];\n            const showFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                designFiles.push(event.target.files[i].name);\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n            }\n            this.setState({\n                designPictures: designFiles,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        })\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 20) {\n            toast('Only 20 images can be uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-design-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n    validateDesignInput = () => {\n        const design = {\n            designTitle: this.state.designTitle,\n            designText: this.state.designText,\n            designPictures: this.state.designPictures,\n            designType: this.state.designType\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(design, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-design-main-container\" fluid={true}>\n                    <Container className=\"register-design-sub-container container\">\n                        <Row className=\"m-0\">\n                            <span className=\"register-design-span\">Create new Design :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-design-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>\n                                        <Row className=\"m-0\">\n                                        <FormGroup className=\"px-5 pt-5\" as={Col}>\n                                            <Form.File\n                                                className=\"register-design-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"images\"\n                                                label={this.state.errors.designPictures && \"You need to select images to upload!\"\n                                                || \"Maximum images allowed to upload : 20\"}\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n\n                                        <FormGroup className=\"px-5 pt-5\" as={Col}>\n                                            <FormControl\n                                                className=\"register-design-form-control-option\"\n                                                name=\"designType\"\n                                                as=\"select\"\n                                                onChange={this.handleChange}>\n                                                <option\n                                                    className=\"register-design-option\">\n                                                    Choose design type...\n                                                </option>\n                                                {designTypes.map(des => {\n                                                    return (\n                                                        <option\n                                                            className=\"register-design-option\"\n                                                            key={des._id}\n                                                            value={des.type}>\n                                                            {des.type}\n                                                        </option>\n                                                    )\n                                                })}\n                                            </FormControl>\n                                            {this.state.errors.designType &&\n                                            <FormLabel className=\"text-danger pt-3\">\n                                                {this.state.errors.designType}\n                                            </FormLabel>\n                                            }\n                                        </FormGroup>\n                                        </Row>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.designTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-design-form-control\"\n                                                autoFocus={true}\n                                                name=\"designTitle\"\n                                                type=\"text\"\n                                                value={this.state.designTitle}\n                                                placeholder=\"Enter title for the Design\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.designText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-design-form-control\"\n                                                name=\"designText\"\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={this.state.designText}\n                                                placeholder=\"Enter text for the Design (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-design-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    CREATE DESIGN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-design-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterDesignForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/designService.js",["339"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\n// const apiEndPoint = apiUrl + \"/designs\";\nconst apiEndPoint = \"/designs\";\n\nfunction designUrl(id){\n    return `${apiEndPoint}/${id}`;\n}\n\n//Creating single Design object - admin rights only.\nexport function createDesign(design){\n    return httpService\n        .post(apiEndPoint,design,{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n//Retrieve all the Design objects from DB - no token needed.\nexport function getDesigns(){\n    return httpService\n        .get(apiEndPoint);\n}\n\n//Retireving single Design object - no token needed.\nexport function getDesign(designId){\n    return httpService\n        .get(designUrl(designId));\n}\n\n//Updating single Design object - admin rights only.\nexport function updateDesign(design,designId){\n    const body = {...design}\n    return httpService\n        .put(designUrl(designId),body,{\n            headers: {\n                'x-auth-token':getCurrentAdmin()\n            }\n        });\n}\n\n//Deleting single Design object - admin rights only.\nexport function deleteDesign(designId){\n    return httpService\n        .delete(designUrl(designId),{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/allDesignsList.jsx",["340"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport {Button, Image} from \"react-bootstrap\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {Link} from \"react-router-dom\";\nimport {picUrl} from \"../../config.json\";\nimport {deleteDesign, getDesigns} from \"../../services/designService\";\nimport \"../../css/admin/designs/designAllList.css\";\nimport {paginateFunction} from \"../../services/paginateFunction\";\nimport Paginate from \"../../components/paginate\";\nimport _ from \"lodash\";\nimport DropDownDesigns from \"../../components/DropDownDesigns\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass AllDesignsList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            designsList: [],\n            selectedDesign: {designType: 'ALL DESIGNS'},\n            designsPerPage: 3,\n            currentPage: 1\n        }\n    }\n\n\n    async componentDidMount() {\n        const {data: designs} = await getDesigns();\n        //Sreating new array with objects by unique 'designType'\n        const uniqList = _.uniqBy(designs, 'designType');\n        const designsList = [{designType: 'ALL DESIGNS'}, ...uniqList]\n        this.setState({\n            designs,\n            designsList\n        });\n    }\n\n\n    handleDelete = async (design) => {\n        const allDesigns = this.state.designs;\n        const designs = allDesigns.filter(d => d._id !== design._id);\n        this.setState({designs});\n        try {\n            await deleteDesign(design._id);\n            toast(`Design : ${design.designTitle} was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'designlist-toaster'\n            });\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log('Design with the given ID was not found!');\n            toast.error('This Design was aleady been deleted!');\n            this.setState({\n                designs: allDesigns\n            });\n        }\n    }\n\n    handleDesignSort = (design) => {\n        this.setState({\n            selectedDesign: design, currentPage: 1\n        });\n        console.log(design);\n    }\n\n    handlePageChange = (pageNumber) => {\n        this.setState({\n            currentPage: pageNumber\n        });\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n\n        const filteredByDesign = this.state.selectedDesign && this.state.selectedDesign._id\n            ? this.state.designs.filter(des => des.designType === this.state.selectedDesign.designType)\n            : this.state.designs;\n\n        const paginatedDesigns = paginateFunction(filteredByDesign, this.state.designsPerPage, this.state.currentPage);\n\n        return (\n            <div>\n                <Container className=\"designlist-main-container\" fluid={true}>\n                    <Container className=\"designlist-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <Col className=\"designlist-span-col\">\n                                <span className=\"designlist-span\">All created Designs :</span>\n                            </Col>\n                            <Col className=\"designlist-span-col d-flex justify-content-end\">\n                                <Paginate\n                                    className=\"m-0\"\n                                    itemsCount={filteredByDesign.length}\n                                    itemsPerPage={this.state.designsPerPage}\n                                    currentPage={this.state.currentPage}\n                                    onPageChange={this.handlePageChange}/>\n                            </Col>\n                        </Row>\n                        <Table responsive hover className=\"designlist-table\">\n                            <thead className=\"designlist-thead\">\n                            <tr>\n                                <th>Title</th>\n                                <th>Text</th>\n                                <th>Type</th>\n                                <th>Pictures</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"designlist-tbody\">\n                            {paginatedDesigns.map(design => {\n                                return (\n                                    <tr key={design._id}>\n                                        <td>{design.designTitle}</td>\n                                        <td>{design.designText}</td>\n                                        <td>{design.designType}</td>\n                                        <td style={{width: 40}}>\n                                            <div\n                                                className=\"overflow-auto\"\n                                                style={{height: 200}}>\n                                                {design.designPictures.map(dp => {\n                                                    return (\n                                                        <Image\n                                                            key={dp}\n                                                            src={pictureUrl + dp}\n                                                            width=\"150\"\n                                                            height=\"150\"\n                                                            className=\"mb-1\"\n                                                        />\n                                                    )\n                                                })}\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <Link\n                                                className=\"designlist-link\"\n                                                to={`/admin/designslist/${design._id}`}>\n                                                Update\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Button\n                                                className=\"designlist-delete-button\"\n                                                onClick={() => this.handleDelete(design)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Row>\n                            <Col>\n                        <Button\n                            className=\"designlist-redirect-button\"\n                            onClick={this.adminRedirect}>\n                            BACK TO ADMIN PANEL\n                        </Button>\n                            </Col>\n                            <Col className=\"d-flex justify-content-end\">\n                                <DropDownDesigns\n                                designs={this.state.designsList}\n                                designProperty=\"designType\"\n                                selectedDesign={this.state.selectedDesign}\n                                onSelectDropDown={this.handleDesignSort}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AllDesignsList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/updateDesignForm.jsx",["341"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getDesign, updateDesign} from \"../../services/designService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/designs/designUpdate.css\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nconst designTypes = [\n    {_id: 1, type: 'photography'},\n    {_id: 2, type: 'graphic design'},\n    {_id: 3, type: 'prepress'}\n];\n\nclass UpdateDesignForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            design: {\n                designTitle: '',\n                designText: '',\n                designType: '',\n                designPictures: []\n            },\n            errors: {},\n            isDisabled: true,\n            uploadPictures: null,\n            showPictures: null\n        }\n    }\n\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        designTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Design title'),\n        designText: Joi.string()\n            .allow('')\n            .min(10)\n            .max(200)\n            .trim(true)\n            .label('Design text'),\n        designPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Design pictures'),\n        designType: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .label('Design type')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateDesignInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-design-toaster'\n            });\n        }\n\n        const design = {\n            designTitle: this.state.design.designTitle,\n            designText: this.state.design.designText,\n            designPictures: this.state.design.designPictures,\n            designType: this.state.design.designType\n        }\n        toast('Design update was successful', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-design-toaster'\n        });\n        this.setState({\n            isDisabled: true\n        });\n        await updateDesign(design, this.state.design._id);\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const design = {...this.state.design};\n            const name = event.target.name;\n            const designFiles = [];\n            const showFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                designFiles.push(event.target.files[i].name);\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n            }\n            design[name] = designFiles;\n            this.setState({\n                design,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const design = {...this.state.design};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        design[name] = value;\n        this.setState({\n            design,\n            isDisabled: false\n        })\n    }\n\n\n    async componentDidMount() {\n        await this.populateDesign();\n        console.log(this.state.design);\n    }\n\n\n    async populateDesign() {\n        try {\n            const designId = this.props.match.params.id;\n            const {data: design} = await getDesign(designId);\n            this.setState({\n                design: this.mapToViewModel(design)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Design with the given ID');\n        }\n    }\n\n\n    mapToViewModel(design) {\n        return {\n            _id: design._id,\n            designTitle: design.designTitle,\n            designText: design.designText,\n            designPictures: design.designPictures,\n            designType: design.designType,\n        }\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 20) {\n            toast('Only 20 images can be uploaded at a time!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-design-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateDesignInput = () => {\n        const design = {\n            _id: this.state.design._id,\n            designTitle: this.state.design.designTitle,\n            designText: this.state.design.designText,\n            designPictures: this.state.design.designPictures,\n            designType: this.state.design.designType\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(design, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/designslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-design-main-container\" fluid={true}>\n                    <Container className=\"update-design-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-design-span\">Update Design :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-design-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.design.designPictures.map(dp => {\n                                                return (\n                                                    <CardImg\n                                                        key={dp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={pictureUrl + dp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>}\n                                        <Row className=\"m-0\">\n                                            <FormGroup className=\"px-5 pt-5\">\n                                                <Form.File\n                                                    className=\"update-design-form\"\n                                                    type=\"file\"\n                                                    id=\"images\"\n                                                    name=\"designPictures\"\n                                                    label=\"Maximum images allowed to upload : 20\"\n                                                    multiple\n                                                    onChange={this.handleImages}/>\n                                            </FormGroup>\n                                            <FormGroup className=\"px-5 pt-5\" as={Col}>\n                                                <FormControl\n                                                    className=\"update-design-form-control-option\"\n                                                    name=\"designType\"\n                                                    as=\"select\"\n                                                    onChange={this.handleChange}>\n                                                    <option\n                                                        className=\"update-design-option\">\n                                                        Current : {this.state.designType}\n                                                    </option>\n                                                    {designTypes.map(des => {\n                                                        return (\n                                                            <option\n                                                                className=\"register-design-option\"\n                                                                key={des._id}\n                                                                value={des.type}>\n                                                                {des.type}\n                                                            </option>\n                                                        )\n                                                    })}\n                                                </FormControl>\n                                                {this.state.errors.designType &&\n                                                <FormLabel className=\"text-danger pt-3\">\n                                                    {this.state.errors.designType}\n                                                </FormLabel>\n                                                }\n                                            </FormGroup>\n                                        </Row>\n\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.designTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"update-design-form-control\"\n                                                autoFocus={true}\n                                                name=\"designTitle\"\n                                                type=\"text\"\n                                                value={this.state.design.designTitle}\n                                                placeholder=\"Enter title for the Design\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.designText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"update-design-form-control\"\n                                                name=\"designText\"\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={this.state.design.designText}\n                                                placeholder=\"Enter text for the Design (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-design-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE DESIGN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-design-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO DESIGNS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateDesignForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/paginateFunction.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/paginate.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/footer.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownComments.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownDesigns.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/biography/biography.jsx",["342","343","344","345"],"import React, {Component} from 'react';\nimport {getBios} from \"../../services/bioService\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Image from \"react-bootstrap/Image\";\nimport \"../../css/biography/biography.css\";\nimport {picUrl} from \"../../config.json\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass Biography extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bios: []\n        }\n    }\n\n    async componentDidMount() {\n        const {data: bios} = await getBios();\n        this.setState({\n            bios\n        });\n    }\n\n    render() {\n        return (\n            <Container className=\"biography-main\" fluid={true}>\n                <Row>\n                    <Col className=\"biography-title-col d-flex flex-column text-center justify-content-center\">\n                        <span className=\"biography-title-span\">\n                            IN THE BEGINNING\n                        </span>\n                        <span className=\"biography-subtitle-span\">\n                            Let me share our history with you\n                        </span>\n                    </Col>\n                </Row>\n                {this.state.bios.map((bio, index) => {\n                    if (index % 2 == 0) {\n                        return (\n                            <Row key={bio._id} className=\"d-flex flex-row\">\n                                <Col className=\"biography-reverse-col p-5\" md=\"auto\">\n                                    {bio.bioPictures.map(bp => {\n                                        return (\n                                            <Image src={pictureUrl + bp}\n                                                   style={{width: 300}}/>\n                                        )\n                                    })}\n                                </Col>\n                                <Col\n                                    className=\"biography-col p-5 d-flex flex-column text-center justify-content-center\">\n                                    <span\n                                        className=\"biography-span-title\">\n                                        {bio.bioTitle}\n                                    </span>\n                                    <p className=\"text-center\">{bio.bioText}</p>\n                                </Col>\n                            </Row>\n                        )\n                    } else if (index % 2 == 1) {\n                        return (\n                            <Row key={bio._id} className=\"d-flex flex-row-reverse\">\n                                <Col className=\"biography-col p-5\" md=\"auto\">\n                                    {bio.bioPictures.map(bp => {\n                                        return (\n                                            <Image src={pictureUrl + bp}\n                                                   style={{width: 300}}/>\n                                        )\n                                    })}\n                                </Col>\n                                <Col\n                                    className=\"biography-reverse-col p-5 d-flex flex-column text-center justify-content-center\">\n                                    <span\n                                        className=\"biography-span-title text-center\">\n                                        {bio.bioTitle}\n                                    </span>\n                                    <p className=\"text-center\">{bio.bioText}</p>\n                                </Col>\n                            </Row>\n                        )\n                    }\n                })}\n            </Container>\n        );\n    }\n}\n\nexport default Biography;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/designs/designs.jsx",["346"],"import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport \"../../css/designs/designPage.css\";\nimport {getDesigns} from \"../../services/designService\";\nimport {Carousel} from \"react-bootstrap\";\nimport Image from \"react-bootstrap/Image\";\nimport {picUrl} from \"../../config.json\";\nimport {Link} from \"react-router-dom\";\nimport _ from 'lodash';\nimport ListGroupDesigns from \"../../components/listGroupDesigns\";\n\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass Designs extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designs: [],\n            list: [],\n            selectedDesign: {\n                designType: 'All'\n            }\n        }\n    }\n\n    async componentDidMount() {\n        const {data: designs} = await getDesigns();\n        const uniqDesigns = _.uniqBy(designs, 'designType');\n        const list = [{designType: 'All'}, ...uniqDesigns];\n        this.setState({\n            designs,\n            list\n        })\n        console.log(this.state);\n    }\n\n    handleDesignSort = (design) => {\n        this.setState({\n            selectedDesign: design\n        });\n    }\n\n\n    render() {\n\n        const filteredByType = this.state.selectedDesign && this.state.selectedDesign._id\n            ? this.state.designs.filter(d => d.designType === this.state.selectedDesign.designType)\n            : this.state.designs;\n\n        return (\n            <div>\n                <Container className=\"designs-main\" fluid={true}>\n                    <Row>\n                        <Col className=\"designs-title-col d-flex flex-column text-center justify-content-center\">\n                            <span className=\"designs-title-span\">\n                                WE DESIGN YOUR WORLD\n                            </span>\n                            <span className=\"designs-subtitle-span\">\n                                Recreate your imagination through our work\n                            </span>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"p-5 designs-carousel-col\">\n                            <Carousel>\n                                {filteredByType.map(des => {\n                                    return (\n                                        <Carousel.Item key={des._id}>\n                                            <Row\n                                                className=\"d-flex flex-row justify-content-between designs-carousel-row\">\n                                                <Link\n                                                    to={`/designs/${des._id}`}>\n                                                    <Carousel.Caption>\n                                                    <span className='designs-carousel-span'>\n                                                        {des.designTitle}\n                                                    </span>\n                                                        <p className='designs-carousel-p'>\n                                                            CLICK TO SEE MORE DETAILS...\n                                                        </p>\n                                                    </Carousel.Caption>\n                                                </Link>\n                                                <Image\n                                                    id=\"a\"\n                                                    className=\"designs-carousel-image\"\n                                                    src={pictureUrl + des.designPictures[0]}\n                                                    style={{width: 610, height: 610}}\n                                                    alt=\"Design N/A\"/>\n                                                <Image\n                                                    className=\"designs-carousel-image\"\n                                                    src={pictureUrl + des.designPictures[1]}\n                                                    style={{width: 610, height: 610}}\n                                                    alt=\"Design N/A\"/>\n                                                <Image\n                                                    className=\"designs-carousel-image\"\n                                                    src={pictureUrl + des.designPictures[2]}\n                                                    style={{width: 610, height: 610}}\n                                                    alt=\"Design N/A\"/>\n                                            </Row>\n                                        </Carousel.Item>\n                                    )\n                                })}\n                            </Carousel>\n                        </Col>\n                    </Row>\n                    <ListGroupDesigns\n                        designs={this.state.list}\n                        selectedDesign={this.state.selectedDesign}\n                        onDesignSelect={this.handleDesignSort}/>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Designs;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/designs/designsDetails.jsx",["347"],"import React, {Component} from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Image from \"react-bootstrap/Image\";\nimport {picUrl} from \"../../config.json\";\nimport {getDesign} from \"../../services/designService\";\nimport \"../../css/designs/designDetails.css\";\nimport {Link} from \"react-router-dom\";\n\nconst pictureUrl = process.env.REACT_APP_PICTURES_URL;\n\nclass DesignsDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            design: {\n                designPictures: [],\n                designTitle: '',\n                designText: ''\n            },\n            mainPicture: '',\n            fullScreen: false\n        }\n    }\n\n\n    async componentDidMount() {\n        const designId = this.props.match.params.id;\n        const {data: design} = await getDesign(designId);\n        const mainPicture = design.designPictures[0];\n        this.setState({\n            design,\n            mainPicture\n        });\n        console.log(this.state);\n    }\n\n\n    pictureChange = (picture) => {\n        this.setState({\n            mainPicture: picture\n        })\n    }\n\n    showFullscreen = () => {\n        this.setState({\n            fullScreen: true\n        });\n    }\n\n    closeFullScreen = () => {\n        this.setState({\n            fullScreen: false\n        });\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"design-details-main\" fluid={true}>\n                    {this.state.fullScreen &&\n                    <Container fluid={true}>\n                        <Image\n                            onClick={this.closeFullScreen}\n                            className=\"image-overlay\"\n                            src={pictureUrl + this.state.mainPicture}\n                        />\n                    </Container>\n                    }\n                    <Row>\n                        <Col>\n                            <Row>\n                                <Col className=\"design-details-leftcol-span p-5 text-center\">\n                                    <span>{this.state.design.designTitle}</span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col  id=\"Span\" className=\"design-details-leftcol p-5\">\n                                    <Row className=\"d-flex flex-row justify-content-center\">\n                                    <span id=\"show-span\" className=\"show-span\">\n                                        CLICK ON IMAGE FOR FULLSCREEN\n                                    </span>\n                                    </Row>\n                                    <Image\n                                        onClick={this.showFullscreen}\n                                        className=\"design-details-image\"\n                                        src={pictureUrl + this.state.mainPicture}\n                                    />\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col className=\"design-details-rightcol\">\n                            <Row>\n                                <Col\n                                    className=\"design-details-rightcol-images overflow-auto p-5\">\n                                    {this.state.design.designPictures.map(dp => {\n                                        return (\n                                            <Image\n                                                key={dp}\n                                                onClick={() => this.pictureChange(dp)}\n                                                className=\"design-details-images mb-3\"\n                                                src={pictureUrl + dp}\n                                                style={{width: 525, height: \"auto\"}}/>\n                                        )\n                                    })}\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"design-details-rightcol-span text-center p-5\">\n                                        <span>\n                                    {this.state.design.designText}\n                                        </span>\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Col className=\"design-details-rightcol-link text-center p-5\">\n                                    <Link\n                                        className=\"design-details-link\"\n                                        to=\"/designs\">\n                                        <span>\n                                        RETURN TO DESIGNS\n                                        </span>\n                                    </Link>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n\n}\n\nexport default DesignsDetails;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/listGroupDesigns.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/homepage/homepage.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/homepageCards.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/scrollToTop.jsx",[],{"ruleId":"348","replacedBy":"349"},{"ruleId":"350","replacedBy":"351"},{"ruleId":"352","severity":1,"message":"353","line":2,"column":9,"nodeType":"354","messageId":"355","endLine":2,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":2,"column":9,"nodeType":"354","messageId":"355","endLine":2,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":11,"column":9,"nodeType":"354","messageId":"355","endLine":11,"endColumn":15},{"ruleId":"357","severity":1,"message":"358","line":194,"column":90,"nodeType":"359","messageId":"360","endLine":194,"endColumn":92},{"ruleId":"357","severity":1,"message":"358","line":195,"column":53,"nodeType":"359","messageId":"360","endLine":195,"endColumn":55},{"ruleId":"352","severity":1,"message":"356","line":8,"column":9,"nodeType":"354","messageId":"355","endLine":8,"endColumn":15},{"ruleId":"361","severity":1,"message":"362","line":59,"column":9,"nodeType":"363","messageId":"364","endLine":59,"endColumn":21,"fix":"365"},{"ruleId":"352","severity":1,"message":"356","line":6,"column":9,"nodeType":"354","messageId":"355","endLine":6,"endColumn":15},{"ruleId":"352","severity":1,"message":"366","line":11,"column":20,"nodeType":"354","messageId":"355","endLine":11,"endColumn":25},{"ruleId":"352","severity":1,"message":"356","line":12,"column":9,"nodeType":"354","messageId":"355","endLine":12,"endColumn":15},{"ruleId":"357","severity":1,"message":"358","line":197,"column":94,"nodeType":"359","messageId":"360","endLine":197,"endColumn":96},{"ruleId":"357","severity":1,"message":"358","line":198,"column":57,"nodeType":"359","messageId":"360","endLine":198,"endColumn":59},{"ruleId":"367","severity":1,"message":"368","line":29,"column":1,"nodeType":"369","endLine":34,"endColumn":3},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":4,"column":9,"nodeType":"354","messageId":"355","endLine":4,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"370","severity":1,"message":"371","line":5,"column":5,"nodeType":"372","messageId":"373","endLine":7,"endColumn":6},{"ruleId":"348","replacedBy":"374"},{"ruleId":"350","replacedBy":"375"},{"ruleId":"352","severity":1,"message":"366","line":13,"column":20,"nodeType":"354","messageId":"355","endLine":13,"endColumn":25},{"ruleId":"352","severity":1,"message":"356","line":14,"column":9,"nodeType":"354","messageId":"355","endLine":14,"endColumn":15},{"ruleId":"357","severity":1,"message":"358","line":192,"column":86,"nodeType":"359","messageId":"360","endLine":192,"endColumn":88},{"ruleId":"357","severity":1,"message":"358","line":193,"column":49,"nodeType":"359","messageId":"360","endLine":193,"endColumn":51},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":9,"column":9,"nodeType":"354","messageId":"355","endLine":9,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":13,"column":9,"nodeType":"354","messageId":"355","endLine":13,"endColumn":15},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":9,"column":9,"nodeType":"354","messageId":"355","endLine":9,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":13,"column":9,"nodeType":"354","messageId":"355","endLine":13,"endColumn":15},{"ruleId":"352","severity":1,"message":"376","line":9,"column":8,"nodeType":"354","messageId":"355","endLine":9,"endColumn":9},{"ruleId":"352","severity":1,"message":"356","line":14,"column":9,"nodeType":"354","messageId":"355","endLine":14,"endColumn":15},{"ruleId":"361","severity":1,"message":"362","line":187,"column":9,"nodeType":"363","messageId":"364","endLine":187,"endColumn":23,"fix":"377"},{"ruleId":"361","severity":1,"message":"362","line":328,"column":9,"nodeType":"363","messageId":"364","endLine":328,"endColumn":30,"fix":"378"},{"ruleId":"352","severity":1,"message":"353","line":4,"column":9,"nodeType":"354","messageId":"355","endLine":4,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":6,"column":9,"nodeType":"354","messageId":"355","endLine":6,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":4,"column":9,"nodeType":"354","messageId":"355","endLine":4,"endColumn":15},{"ruleId":"357","severity":1,"message":"358","line":204,"column":89,"nodeType":"359","messageId":"360","endLine":204,"endColumn":91},{"ruleId":"357","severity":1,"message":"358","line":205,"column":49,"nodeType":"359","messageId":"360","endLine":205,"endColumn":51},{"ruleId":"352","severity":1,"message":"353","line":3,"column":9,"nodeType":"354","messageId":"355","endLine":3,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":9,"column":9,"nodeType":"354","messageId":"355","endLine":9,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":13,"column":9,"nodeType":"354","messageId":"355","endLine":13,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":8,"column":9,"nodeType":"354","messageId":"355","endLine":8,"endColumn":15},{"ruleId":"379","severity":1,"message":"380","line":40,"column":51,"nodeType":"381","messageId":"382","endLine":40,"endColumn":53},{"ruleId":"383","severity":1,"message":"384","line":41,"column":35,"nodeType":"385","messageId":"386","endLine":41,"endColumn":37},{"ruleId":"383","severity":1,"message":"384","line":62,"column":42,"nodeType":"385","messageId":"386","endLine":62,"endColumn":44},{"ruleId":"352","severity":1,"message":"356","line":9,"column":9,"nodeType":"354","messageId":"355","endLine":9,"endColumn":15},{"ruleId":"352","severity":1,"message":"356","line":6,"column":9,"nodeType":"354","messageId":"355","endLine":6,"endColumn":15},"no-native-reassign",["387"],"no-negated-in-lhs",["388"],"no-unused-vars","'apiUrl' is defined but never used.","Identifier","unusedVar","'picUrl' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-whitespace-before-property","Unexpected whitespace before property name.","MemberExpression","unexpectedWhitespace",{"range":"389","text":"390"},"'Image' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["387"],["388"],"'_' is defined but never used.",{"range":"391","text":"390"},{"range":"392","text":"390"},"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",[1752,1753],"",[5786,5787],[11115,11116]]