[{"/home/asen/Workspace/momoDesignSite/momo-site/src/index.js":"1","/home/asen/Workspace/momoDesignSite/momo-site/src/reportWebVitals.js":"2","/home/asen/Workspace/momoDesignSite/momo-site/src/App.js":"3","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userLoginService.js":"4","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminLoginService.js":"5","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navigation.jsx":"6","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/products.jsx":"7","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/basket.jsx":"8","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/registerUserFormUsr.jsx":"9","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userLoginForm.jsx":"10","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/registerAdminForm.jsx":"11","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userProfile.jsx":"12","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/contacts/contacts.jsx":"13","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminLoginForm.jsx":"14","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminPanel.jsx":"15","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/updateAdminForm.jsx":"16","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/allAdminsList.jsx":"17","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/allUsersList.jsx":"18","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/updateUserForm.jsx":"19","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/registerUserForm.jsx":"20","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/images/imagesUpload.jsx":"21","/home/asen/Workspace/momoDesignSite/momo-site/src/services/httpService.js":"22","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminService.js":"23","/home/asen/Workspace/momoDesignSite/momo-site/src/services/imgService.js":"24","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userService.js":"25","/home/asen/Workspace/momoDesignSite/momo-site/src/services/emailService.js":"26","/home/asen/Workspace/momoDesignSite/momo-site/src/components/product.jsx":"27","/home/asen/Workspace/momoDesignSite/momo-site/src/components/contactsMailForm.jsx":"28","/home/asen/Workspace/momoDesignSite/momo-site/src/components/userDeleteAlert.jsx":"29","/home/asen/Workspace/momoDesignSite/momo-site/src/components/usercard.jsx":"30","/home/asen/Workspace/momoDesignSite/momo-site/src/components/imagesUploadForm.jsx":"31","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/emails/allEmailsList.jsx":"32","/home/asen/Workspace/momoDesignSite/momo-site/src/components/trTdTable.jsx":"33","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navLinkComp.jsx":"34","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/updateUserFormUsr.jsx":"35","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/registerBioForm.jsx":"36","/home/asen/Workspace/momoDesignSite/momo-site/src/services/bioService.js":"37","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/allBiosList.jsx":"38","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/updateBioForm.jsx":"39","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/registerBlogForm.jsx":"40","/home/asen/Workspace/momoDesignSite/momo-site/src/services/blogService.js":"41","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/allBlogsList.jsx":"42","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/updateBlogForm.jsx":"43","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blog.jsx":"44","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blogDetails.jsx":"45","/home/asen/Workspace/momoDesignSite/momo-site/src/services/commentService.js":"46","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogCard.jsx":"47","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogComments.jsx":"48","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/comments/AllCommentsList.jsx":"49","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/registerDesignForm.jsx":"50","/home/asen/Workspace/momoDesignSite/momo-site/src/services/designService.js":"51","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/allDesignsList.jsx":"52","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/updateDesignForm.jsx":"53","/home/asen/Workspace/momoDesignSite/momo-site/src/services/paginateFunction.js":"54","/home/asen/Workspace/momoDesignSite/momo-site/src/components/paginate.jsx":"55","/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownComp.jsx":"56","/home/asen/Workspace/momoDesignSite/momo-site/src/components/footer.jsx":"57"},{"size":773,"mtime":1612780866716,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":1607679022000,"results":"60","hashOfConfig":"59"},{"size":5569,"mtime":1615452642380,"results":"61","hashOfConfig":"59"},{"size":928,"mtime":1612606119893,"results":"62","hashOfConfig":"59"},{"size":993,"mtime":1614673318402,"results":"63","hashOfConfig":"59"},{"size":8960,"mtime":1615466939325,"results":"64","hashOfConfig":"59"},{"size":1425,"mtime":1610572344000,"results":"65","hashOfConfig":"59"},{"size":1545,"mtime":1610572344000,"results":"66","hashOfConfig":"59"},{"size":13226,"mtime":1610694353000,"results":"67","hashOfConfig":"59"},{"size":8222,"mtime":1615375537005,"results":"68","hashOfConfig":"59"},{"size":8825,"mtime":1615115056998,"results":"69","hashOfConfig":"59"},{"size":3957,"mtime":1615451391622,"results":"70","hashOfConfig":"59"},{"size":3767,"mtime":1610987097000,"results":"71","hashOfConfig":"59"},{"size":7699,"mtime":1615450965349,"results":"72","hashOfConfig":"59"},{"size":4084,"mtime":1614942401054,"results":"73","hashOfConfig":"59"},{"size":9843,"mtime":1615115158846,"results":"74","hashOfConfig":"59"},{"size":4303,"mtime":1614942401046,"results":"75","hashOfConfig":"59"},{"size":5382,"mtime":1615279169936,"results":"76","hashOfConfig":"59"},{"size":16548,"mtime":1615202719967,"results":"77","hashOfConfig":"59"},{"size":15339,"mtime":1615202921788,"results":"78","hashOfConfig":"59"},{"size":4040,"mtime":1613461409968,"results":"79","hashOfConfig":"59"},{"size":755,"mtime":1614752945490,"results":"80","hashOfConfig":"59"},{"size":1497,"mtime":1609237628000,"results":"81","hashOfConfig":"59"},{"size":692,"mtime":1610615157000,"results":"82","hashOfConfig":"59"},{"size":2509,"mtime":1613128789145,"results":"83","hashOfConfig":"59"},{"size":802,"mtime":1612607041859,"results":"84","hashOfConfig":"59"},{"size":468,"mtime":1608631258000,"results":"85","hashOfConfig":"59"},{"size":2828,"mtime":1610987283000,"results":"86","hashOfConfig":"59"},{"size":908,"mtime":1610952733000,"results":"87","hashOfConfig":"59"},{"size":917,"mtime":1610699463000,"results":"88","hashOfConfig":"59"},{"size":845,"mtime":1611043583000,"results":"89","hashOfConfig":"59"},{"size":4872,"mtime":1615285448779,"results":"90","hashOfConfig":"59"},{"size":965,"mtime":1614755166099,"results":"91","hashOfConfig":"59"},{"size":769,"mtime":1614690466456,"results":"92","hashOfConfig":"59"},{"size":17631,"mtime":1613110963120,"results":"93","hashOfConfig":"59"},{"size":10470,"mtime":1615116843049,"results":"94","hashOfConfig":"59"},{"size":1157,"mtime":1613717463408,"results":"95","hashOfConfig":"59"},{"size":6294,"mtime":1615284029103,"results":"96","hashOfConfig":"59"},{"size":12571,"mtime":1615116861833,"results":"97","hashOfConfig":"59"},{"size":12827,"mtime":1615116824521,"results":"98","hashOfConfig":"59"},{"size":1199,"mtime":1613812905737,"results":"99","hashOfConfig":"59"},{"size":6947,"mtime":1615284184372,"results":"100","hashOfConfig":"59"},{"size":15416,"mtime":1615117084098,"results":"101","hashOfConfig":"59"},{"size":2376,"mtime":1615467103038,"results":"102","hashOfConfig":"59"},{"size":6883,"mtime":1614245365687,"results":"103","hashOfConfig":"59"},{"size":1737,"mtime":1614329247137,"results":"104","hashOfConfig":"59"},{"size":1670,"mtime":1614064911365,"results":"105","hashOfConfig":"59"},{"size":1250,"mtime":1615195031338,"results":"106","hashOfConfig":"59"},{"size":7148,"mtime":1615293951193,"results":"107","hashOfConfig":"59"},{"size":10399,"mtime":1615117132458,"results":"108","hashOfConfig":"59"},{"size":1210,"mtime":1614584415473,"results":"109","hashOfConfig":"59"},{"size":6147,"mtime":1615284826240,"results":"110","hashOfConfig":"59"},{"size":12322,"mtime":1615117177586,"results":"111","hashOfConfig":"59"},{"size":499,"mtime":1615278045295,"results":"112","hashOfConfig":"59"},{"size":2024,"mtime":1615280183893,"results":"113","hashOfConfig":"59"},{"size":1365,"mtime":1615293507116,"results":"114","hashOfConfig":"59"},{"size":4247,"mtime":1615465950039,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},"tcrdrc",{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"118"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"118"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"118"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"152","usedDeprecatedRules":"118"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"118"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"118"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"118"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"118"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"118"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"118"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"118"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"118"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"118"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"118"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"118"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"118"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"118"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"118"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"118"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"118"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"118"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"228","usedDeprecatedRules":"118"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"118"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"118"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"118"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"118"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/asen/Workspace/momoDesignSite/momo-site/src/index.js",[],["257","258"],"/home/asen/Workspace/momoDesignSite/momo-site/src/reportWebVitals.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/App.js",["259","260"],"/home/asen/Workspace/momoDesignSite/momo-site/src/services/userLoginService.js",["261"],"import httpService from \"./httpService\";\nimport {toast} from \"react-toastify\";\nimport {apiUrl} from \"../config.json\";\n\nconst apiEndPoint = apiUrl + \"/userauthent\";\n\n//Fetching User frontend data to the sever\n//Taking the response token and storing it in localStorage so the user stayed always logget till logout\nexport function userLogin(data) {\n    return httpService\n        .post(apiEndPoint, data)\n        .then(response => {\n        if (response.data) {\n            localStorage.setItem(\"user\", response.data)\n        }\n        return response.data;\n    })\n        .catch(err => {\n            // toast.error(err.response.data);\n            return Promise.reject(err);\n        });\n}\n\n//Function for logging out the User\nexport function userLogout() {\n    localStorage.removeItem(\"user\");\n}\n\n//Function returning the currently logged User (token)\nexport function getCurrentUser() {\n    return localStorage.getItem(\"user\");\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminLoginService.js",["262"],"import httpService from \"./httpService\";\nimport {toast} from \"react-toastify\";\nimport {apiUrl} from \"../config.json\";\n\nconst apiEndPoint = apiUrl + \"/adminauthent\";\n\n//Fetching frontend admin data (email and password) to the server\n//Taking the response token and saving it in the session storage(Login after every browser closing required);\nexport function adminLogin(data) {\n    return httpService\n        .post(apiEndPoint, data)\n        .then(response => {\n            if (response.data) {\n                sessionStorage.setItem(\"admin\", response.data);\n            }\n            return response.data;\n        })\n        .catch(err => {\n            // toast.error(err.response.data);\n            return Promise.reject(err);\n        });\n}\n\n//Function for logging out the Admin\nexport function adminLogout() {\n    sessionStorage.removeItem(\"admin\");\n}\n\n//Function returning the currently logged Admin (token)\nexport function getCurrentAdmin() {\n    return sessionStorage.getItem(\"admin\");\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/navigation.jsx",["263","264"],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/products.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/basket.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/registerUserFormUsr.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userLoginForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/registerAdminForm.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/userProfile.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/contacts/contacts.jsx",["265","266","267","268"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Joi from \"joi\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport ContactsMailForm from \"../../components/contactsMailForm\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nimport {sendEmail} from \"../../services/emailService\";\nimport {toast} from \"react-toastify\";\n\nclass Contacts extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fullname: '',\n            email: '',\n            subject: '',\n            message: '',\n            isDisabled: true,\n            errors: {}\n        }\n    }\n\n    schema = Joi.object({\n        fullname: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Full name\"),\n        email: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Email\"),\n        subject: Joi.string()\n            .required()\n            .min(5)\n            .max(255)\n            .label(\"Subject\"),\n        message: Joi.string()\n            .required()\n            .min(5)\n            .max(1000)\n            .label(\"Message\")\n\n    })\n\n    recaptchaRef = React.createRef();\n\n    validateEmail = () => {\n        const email = {\n            fullname: this.state.fullname,\n            email: this.state.email,\n            subject: this.state.subject,\n            message: this.state.message\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(email,options);\n        console.log(result);\n\n        if(!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name] : value,\n            isDisabled: false\n        });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateEmail();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if(errors) return;\n\n        this.setState({isDisabled: true});\n\n        const email = {\n            fullname: this.state.fullname,\n            email: this.state.email,\n            subject: this.state.subject,\n            message: this.state.message\n        };\n\n        await sendEmail(email);\n        toast.success('Your message was sent successfully!');\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"container\" fluid={true}>\n                    <Row className=\"m-0\">\n                        <Col>\n                            <ContactsMailForm\n                                {...this.state}\n                                onChange={this.handleChange}\n                                onSubmit={this.handleSubmit}\n                                Recaptcha={\n                                    <ReCAPTCHA\n                                        ref={this.recaptchaRef}\n                                        sitekey=\"6LeBdTEaAAAAAAWhXFaJJ4ueXpNrLsvQoN1tXR27\"\n                                        size=\"invisible\"/>\n                                }\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Contacts;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminLoginForm.jsx",["269"],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/adminPanel.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/updateAdminForm.jsx",["270"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Joi from \"joi\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport FormCheck from \"react-bootstrap/FormCheck\";\nimport \"../../css/admin/adminUpdate.css\";\nimport {getAdmin, updateAdmin} from \"../../services/adminService\";\n\nclass UpdateAdminForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            admin: {\n                adminName: \"\",\n                adminEmail: \"\",\n                adminPassword: \"\",\n                isAdmin: false\n            },\n            errors: {},\n            isDisabled: true\n        }\n\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        adminName: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Admin Name\"),\n        adminEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Admin Email\"),\n        adminPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .label(\"Admin Password\"),\n        isAdmin: Joi.boolean()\n            .label(\"Is Admin\")\n    });\n\n\n    handleChange = (event) => {\n        const admin = {...this.state.admin};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        admin [name] = value;\n        this.setState({\n            admin,\n            isDisabled: false\n        })\n    }\n\n\n    async populateAdmin() {\n        try {\n            const adminId = this.props.match.params.id;\n            const {data: admin} = await getAdmin(adminId);\n            this.setState({admin: this.mapToViewModel(admin)});\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log('There is no Admin with the given ID!');\n        }\n    }\n\n    async componentDidMount() {\n        await this.populateAdmin();\n    }\n\n    mapToViewModel(admin) {\n        return {\n            _id: admin._id,\n            adminName: admin.adminName,\n            adminEmail: admin.adminEmail,\n            // adminPassword: admin.adminPassword,\n            isAdmin: admin.isAdmin\n        };\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateAdminInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        const admin = {\n            adminName: this.state.admin.adminName,\n            adminEmail: this.state.admin.adminEmail,\n            adminPassword: this.state.admin.adminPassword,\n            isAdmin: this.state.admin.isAdmin\n        };\n\n        await updateAdmin(admin, this.state.admin._id);\n        this.setState({isDisabled: true});\n        toast('Admin update was successful!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-toaster'\n        });\n    }\n\n\n    validateAdminInput = () => {\n        const admin = {\n            adminName: this.state.admin.adminName,\n            adminEmail: this.state.admin.adminEmail,\n            adminPassword: this.state.admin.adminPassword,\n            isAdmin: this.state.admin.isAdmin\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(admin, options);\n        console.log(result);\n\n        if (!result.error) return null;\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/adminslist\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-main-container\" fluid={true}>\n                    <Container className=\"update-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-span\">Update admin :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <FormGroup className=\"px-5 pt-4\">\n                                            {this.state.errors.adminName &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminName}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                autoFocus={true}\n                                                id=\"adminName\"\n                                                name=\"adminName\"\n                                                type=\"text\"\n                                                value={this.state.admin.adminName}\n                                                placeholder=\"Enter Admin's name\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.adminEmail &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminEmail}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                id=\"adminEmail\"\n                                                name=\"adminEmail\"\n                                                type=\"email\"\n                                                value={this.state.admin.adminEmail}\n                                                placeholder=\"Enter Admin's email\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.adminPassword &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.adminPassword}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-form-control\"\n                                                id=\"adminPassword\"\n                                                name=\"adminPassword\"\n                                                type=\"password\"\n                                                value={this.state.admin.adminPassword}\n                                                placeholder=\"Enter Admin's password\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            <FormCheck\n                                                className=\"update-checkbox\"\n                                                id=\"isAdmin\"\n                                                name=\"isAdmin\"\n                                                type=\"checkbox\"\n                                                checked={this.state.admin.isAdmin}\n                                                value={this.state.admin.isAdmin}\n                                                label=\"User will have Admin rights\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-5 py-2 d-flex justify-content-between\">\n                                            <Col>\n                                                <Button\n                                                    className=\"update-update-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE ADMIN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMINS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateAdminForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/admin/allAdminsList.jsx",["271","272"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport {Link} from \"react-router-dom\";\nimport {toast, Zoom} from \"react-toastify\";\nimport \"../../css/admin/adminAllList.css\";\nimport {deleteAdmin, getAllAdmins, loggedAdmin} from \"../../services/adminService\";\n\nclass AllAdminsList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            admins: [],\n        }\n    }\n\n\n    async componentDidMount() {\n        const {data: admins} = await getAllAdmins();\n        this.setState({admins});\n    }\n\n\n    handleDelete = async (admin) => {\n        const allAdmins = this.state.admins;\n        const admins = allAdmins.filter(a => a._id !== admin._id);\n        this.setState({admins});\n\n        try {\n            await deleteAdmin(admin._id);\n            toast(`Admin : ${admin.adminName} was successfully deleted!`, {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'adminlist-toaster'\n            });\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log(\"Admin with the given ID was not found!\");\n            toast.error(\"This Admin has already been deleted.\");\n            this.setState({admins: allAdmins});\n        }\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"adminlist-main-container\" fluid={true}>\n                    <Container className=\"adminlist-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"adminlist-span\">All registered Admins :</span>\n                        </Row>\n                        <Table responsive className=\"adminlist-table\">\n                            <thead className=\"adminlist-thead\">\n                            <tr>\n                                <th>Full name</th>\n                                <th>Email</th>\n                                <th>Admin rights</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"adminlist-tbody\">\n                            {this.state.admins.map(adm => {\n                                return (\n                                    <tr key={adm._id}>\n                                        <td>{adm.adminName}</td>\n                                        <td>{adm.adminEmail}</td>\n                                        {adm.isAdmin && <td>admin</td>}\n                                        {!adm.isAdmin && <td>suspended</td>}\n                                        <td>\n                                            <Link\n                                                className=\"adminlist-link\"\n                                                to={`/admin/adminslist/${adm._id}`}>\n                                                Update\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Button\n                                                className=\"adminlist-delete-button\"\n                                                onClick={() => this.handleDelete(adm)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Button\n                            className=\"adminlist-redirect-button\"\n                            onClick={this.adminRedirect}>\n                            BACK TO ADMIN PANEL\n                        </Button>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AllAdminsList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/allUsersList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/updateUserForm.jsx",["273"],"import React, {Component} from 'react';\nimport Joi from \"joi\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel, Image} from \"react-bootstrap\";\nimport {picUrl} from \"../../config.json\";\nimport {getUserAdmin, updateUserAdmin} from \"../../services/userService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/user/userUpdate.css\"\nimport CardImg from \"react-bootstrap/CardImg\";\n\nclass UpdateUserForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: {\n                userName: \"\",\n                userFamily: \"\",\n                userEmail: \"\",\n                userPassword: \"\",\n                userAddress: \"\",\n                userTelephone: \"\",\n                userPicture: \"\"\n            },\n            uploadPicture: null,\n            showPicture: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\")\n            .pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\s|\\\\S)(\\\\d[0-9]{9})$'))\n    })\n\n\n    async componentDidMount() {\n        const url = picUrl;\n        await this.populateUser();\n        this.setState({url: url})\n        console.log(this.state);\n    }\n\n\n    populateUser = async () => {\n        try {\n            const userId = this.props.match.params.id;\n            const {data: user} = await getUserAdmin(userId);\n            this.setState({user: this.mapToViewModel(user)});\n        } catch (e) {\n            if (e.response && e.response.status === 404)\n                console.log(\"There is no user with the given ID!\");\n        }\n    }\n\n    handleImage = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = event.target.files[0].name;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0]\n        });\n    }\n\n    handleChange = (event) => {\n        const user = {...this.state.user};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        user[name] = value;\n        this.setState({\n            user,\n            isDisabled: false\n        });\n    }\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUser();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPicture !== null) {\n            const data = new FormData();\n            data.append('file', this.state.uploadPicture);\n            await uploadImageAdmin(data);\n            toast(\"New image successfully uploaded!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-user-toaster'\n            });\n        }\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture\n        };\n        await updateUserAdmin(user, this.state.user._id);\n        this.setState({isDisabled: true});\n        toast(\"User was successfully updated!\", {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-user-toaster'\n        });\n\n\n    }\n\n    mapToViewModel = (user) => {\n        return {\n            _id: user._id,\n            userName: user.userName,\n            userFamily: user.userFamily,\n            userEmail: user.userEmail,\n            userAddress: user.userAddress,\n            userTelephone: user.userTelephone,\n            userPicture: user.userPicture\n        };\n    }\n\n    validateUser = () => {\n        const user = {\n            userName: this.state.user.userName,\n            userFamily: this.state.user.userFamily,\n            userEmail: this.state.user.userEmail,\n            userAddress: this.state.user.userAddress,\n            userTelephone: this.state.user.userTelephone,\n            userPassword: this.state.user.userPassword,\n            userPicture: this.state.user.userPicture\n        };\n\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {}\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/userslist\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-user-main-container\" fluid={true}>\n                    <Container className=\"update-user-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-user-span\">Update user :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-user-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row>\n                                            <Col md=\"auto\" className=\"pr-0\">\n                                                {this.state.showPicture === null &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.url + this.state.user.userPicture}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                {this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.showPicture}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                <FormGroup className=\"px-5 pt-4\">\n                                                    <Form.File\n                                                        className=\"update-user-form\"\n                                                        id=\"image\"\n                                                        name=\"userPicture\"\n                                                        label={this.state.errors.userPicture || \"Change the profile picture\"}\n                                                        onChange={this.handleImage}/>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col className=\"pl-0\">\n                                                <FormGroup className=\"px-5 pt-5\">\n                                                    {this.state.errors.userName &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userName}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        autoFocus={true}\n                                                        name=\"userName\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userName}\n                                                        placeholder=\"Enter user's first name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userFamily &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userFamily}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userFamily\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userFamily}\n                                                        placeholder=\"Enter user's second name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userAddress &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userAddress}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userAddress\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userAddress}\n                                                        placeholder=\"Enter user's address: country / city / street / postal code\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userEmail &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userEmail}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userEmail\"\n                                                        type=\"email\"\n                                                        value={this.state.user.userEmail}\n                                                        placeholder=\"Enter user's e-mail address\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userTelephone &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userTelephone}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userTelephone\"\n                                                        type=\"text\"\n                                                        value={this.state.user.userTelephone}\n                                                        placeholder=\"Enter user's telephone ex (+ or 0)359123456789\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userPassword &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userPassword}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"update-user-form-control\"\n                                                        name=\"userPassword\"\n                                                        type=\"password\"\n                                                        value={this.state.user.userPassword}\n                                                        placeholder=\"Enter user's password : min. 8 symbols\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-user-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE USER\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-user-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO USERS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateUserForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/user/registerUserForm.jsx",["274","275","276"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport Card from \"react-bootstrap/Card\";\nimport \"../../css/admin/user/userRegister.css\"\nimport {CardImg, FormLabel} from \"react-bootstrap\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport {registerUserAdmin} from \"../../services/userService\";\nimport vvitch from '../../assets/vvitch.jpg'\n\nclass RegisterUserForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            userName: '',\n            userFamily: '',\n            userPassword: '',\n            userPicture: '',\n            userEmail: '',\n            userAddress: '',\n            userTelephone: '',\n            errors: {},\n            isDisabled: true,\n            showPicture: '',\n            uploadPicture: ''\n        }\n    }\n\n    schema = Joi.object({\n        userName: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"First name\"),\n        userFamily: Joi.string()\n            .required()\n            .min(3)\n            .max(30)\n            .trim(true)\n            .label(\"Second name\"),\n        userPassword: Joi.string()\n            .required()\n            .min(8)\n            .max(255)\n            .trim(true)\n            .label(\"Password\"),\n        userEmail: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Email\"),\n        userPicture: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .label(\"Profile picture\"),\n        userAddress: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label(\"Address\"),\n        userTelephone: Joi.string()\n            .required()\n            .min(5)\n            .max(50)\n            .trim(true)\n            .label(\"Personal telephone\")\n            .pattern(new RegExp('^\\\\+[0-9]?()[0-9](\\\\s|\\\\S)(\\\\d[0-9]{9})$'))\n    })\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        });\n    }\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateUserInput();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if (errors) return;\n\n        this.setState({isDisabled: true});\n\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n\n        await registerUserAdmin(user);\n        toast('User was successfully registered!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-user-toaster'\n        });\n\n        const data = new FormData();\n        data.append('file', this.state.uploadPicture);\n        await uploadImageAdmin(data);\n        toast('Image was successfully uploaded!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-user-toaster'\n        });\n        console.log('User profile image was uploaded to gallery');\n    }\n\n\n    validateUserInput = () => {\n        const user = {\n            userName: this.state.userName,\n            userFamily: this.state.userFamily,\n            userPassword: this.state.userPassword,\n            userEmail: this.state.userEmail,\n            userPicture: this.state.userPicture,\n            userAddress: this.state.userAddress,\n            userTelephone: this.state.userTelephone\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(user, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    onImageHandler = (event) => {\n        this.setState({\n            showPicture: URL.createObjectURL(event.target.files[0]),\n            uploadPicture: event.target.files[0],\n            userPicture: event.target.files[0].name,\n            isDisabled: false\n        })\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-user-main-container\" fluid={true}>\n                    <Container className=\"register-user-sub-container container-lg\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"register-user-span\">Register new User :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-user-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row>\n                                            <Col md=\"auto\" className=\"pr-0\">\n                                                {this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={this.state.showPicture}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                {!this.state.showPicture &&\n                                                <CardImg\n                                                    className=\"ml-5 mt-5\"\n                                                    src={vvitch}\n                                                    style={{width: 300, height: 365}}/>\n                                                }\n                                                <FormGroup className=\"px-5 pt-4\">\n                                                    <Form.File\n                                                        className=\"register-user-form\"\n                                                        id=\"image\"\n                                                        name=\"image\"\n                                                        label={this.state.errors.userPicture && \"You must select image for profile picture\"\n                                                        || \"Select image for profile picture\"}\n                                                        onChange={this.onImageHandler}/>\n                                                </FormGroup>\n                                            </Col>\n                                            <Col className=\"pl-0\">\n                                                <FormGroup className=\"px-5 pt-5\">\n                                                    {this.state.errors.userName &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userName}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        autoFocus={true}\n                                                        name=\"userName\"\n                                                        type=\"text\"\n                                                        value={this.state.userName}\n                                                        placeholder=\"Enter user's first name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userFamily &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userFamily}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userFamily\"\n                                                        type=\"text\"\n                                                        value={this.state.userFamily}\n                                                        placeholder=\"Enter user's second name\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userAddress &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userAddress}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userAddress\"\n                                                        type=\"text\"\n                                                        value={this.state.userAddress}\n                                                        placeholder=\"Enter user's address: country / city / street / postal code\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userEmail &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userEmail}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userEmail\"\n                                                        type=\"email\"\n                                                        value={this.state.userEmail}\n                                                        placeholder=\"Enter user's e-mail address\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userTelephone &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userTelephone}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userTelephone\"\n                                                        type=\"text\"\n                                                        value={this.state.userTelephone}\n                                                        placeholder=\"Enter user's telephone number\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                                <FormGroup className=\"px-5 pt-2\">\n                                                    {this.state.errors.userPassword &&\n                                                    <FormLabel className=\"text-danger\">\n                                                        {this.state.errors.userPassword}\n                                                    </FormLabel>}\n                                                    <FormControl\n                                                        className=\"register-user-form-control\"\n                                                        name=\"userPassword\"\n                                                        type=\"password\"\n                                                        value={this.state.userPassword}\n                                                        placeholder=\"Enter user's password : min. 8 symbols\"\n                                                        onChange={this.handleChange}/>\n                                                </FormGroup>\n                                            </Col>\n                                        </Row>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-user-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    REGISTER USER\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-user-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterUserForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/images/imagesUpload.jsx",["277","278","279"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\nimport ImagesUploadForm from \"../../components/imagesUploadForm\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport {toast} from \"react-toastify\";\n\nclass ImagesUpload extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedFiles: null,\n            showedFiles: [],\n            isDisabled: true\n        }\n    }\n\n    //Loop through event.target.files to create ObjectURL\n    onChangeHandler = (event) => {\n\n        if (this.maxSelectFiles(event)) {\n\n            const files = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                files.push(URL.createObjectURL(event.target.files[i]));\n            }\n\n            this.setState({\n                showedFiles: files,\n                selectedFiles: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n    //Loop through selected files array to append to data;\n    onClickHandler = async () => {\n\n        const data = new FormData();\n        for (let i = 0; i < this.state.selectedFiles.length; i++) {\n            data.append('file', this.state.selectedFiles[i])\n        }\n\n        await uploadImageAdmin(data);\n        this.setState({\n            isDisabled:true\n        })\n        toast.success('Images were successfully uploaded!');\n    }\n\n\n    //Function for validating the amount of images to upload simultaneously\n    maxSelectFiles = (event) => {\n\n        let files = event.target.files;\n        if (files.length > 5) {\n            toast.error(\"Only 5 images can be uploaded at a time!\");\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\")\n    }\n\n    render() {\n        return (\n            <div>\n                <Container>\n                    <Card>\n                        {this.state.selectedFiles !== null &&\n                        <Card.Header>\n                            <span>Images waiting for upload :</span>\n                        </Card.Header>}\n                        <Card.Body>\n                            {this.state.showedFiles.map(sf => {\n                                return (\n                                    <CardImg\n                                        key={sf}\n                                        className=\"m-2\"\n                                        style={{width: '20rem'}}\n                                        src={sf}/>\n                                )\n                            })\n                            }\n                            <ImagesUploadForm onChange={this.onChangeHandler}/>\n                            <Row className=\"mt-3\">\n                                <Col>\n                                    <Button\n                                        type=\"button\"\n                                        disabled={this.state.isDisabled}\n                                        onClick={this.onClickHandler}>UPLOAD</Button>\n                                </Col>\n                                <Col md={{span: 4, offset: 4}} className=\"d-flex flex-row-reverse\">\n                                    <Button\n                                        onClick={this.adminRedirect}>\n                                        BACK TO ADMIN PANEL\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Card.Body>\n                    </Card>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ImagesUpload;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/httpService.js",["280"],"import axios from \"axios\";\nimport {toast} from \"react-toastify\";\n\naxios.interceptors.response.use(success => {\n    console.log(success);\n    return (success);\n}, error => {\n    const expectedError = error.response &&\n        error.response.status >= 400 &&\n        error.response.status < 500;\n    if (expectedError) {\n        console.log(error.response.data);\n        toast.error(error.response.data, {\n            position: \"top-center\",\n            className: 'http-toaster'\n        });\n    }\n    if (!expectedError) {\n        console.log(error);\n        toast.error('An Unexpected error occured!');\n    }\n    return Promise.reject(error);\n});\n\nexport default {\n    get: axios.get,\n    post: axios.post,\n    put: axios.put,\n    delete: axios.delete\n};\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/adminService.js",["281"],"import httpService from \"./httpService\";\nimport {toast} from \"react-toastify\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\nconst apiEndPoint = apiUrl + \"/admins\";\n\nfunction adminUrl(adminId) {\n    return `${apiEndPoint}/${adminId}`;\n}\n\n\nexport function getAdmin(adminId) {\n    return httpService\n        .get(adminUrl(adminId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n\n\nexport function getAllAdmins() {\n    return httpService\n        .get(apiEndPoint, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\nexport function registerAdmin(admin) {\n    return httpService\n        .post(apiEndPoint, admin,{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\nexport function updateAdmin(admin, adminId) {\n    const body = {...admin};\n    return httpService\n        .put(adminUrl(adminId), body, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\n\nexport function deleteAdmin(adminId) {\n    return httpService\n        .delete(adminUrl(adminId), {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n\n\nexport function loggedAdmin(){\n    return httpService\n        .get(apiEndPoint+\"/adm\",{\n            headers:{\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/imgService.js",["282"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {getCurrentUser} from \"./userLoginService\";\nimport {apiUrl} from \"../config.json\";\n\nconst apiEndPoint = apiUrl + \"/images\";\n\n\nexport function uploadImageAdmin(data){\n    return httpService\n        .post(apiEndPoint, data, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        })\n        .then(response => {\n            console.log(response.statusText)\n        });\n}\n\n\nexport function uploadImageUser(data){\n    return httpService\n        .post(apiEndPoint,data);\n}\n\n\n\nexport function getImages(){\n    return httpService\n        .get(apiEndPoint)\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/userService.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/services/emailService.js",["283"],"import httpService from \"./httpService\";\nimport {getCurrentAdmin} from \"./adminLoginService\";\nimport {apiUrl} from \"../config.json\";\n\nconst apiEndPoint = apiUrl + \"/emails\";\n\nfunction emailUrl(id){\n    return `${apiEndPoint}/${id}`;\n}\n\n\nexport function sendEmail(email){\n    return httpService\n        .post(apiEndPoint, email)\n        .then(res => console.log(res.data))\n        .catch(error => console.log(error))\n}\n\nexport function getAllEmails(){\n    return httpService\n        .get(apiEndPoint, {\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n\nexport function deleteEmail(emailId){\n    return httpService\n        .delete(emailUrl(emailId),{\n            headers: {\n                'x-auth-token': getCurrentAdmin()\n            }\n        });\n}\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/product.jsx",["284"],"import React, {Component} from 'react';\nimport Button from \"react-bootstrap/Button\";\n\nclass Product extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div>\n                <span>{this.props.product.name}</span>\n                <Button onClick={()=>this.props.onBuy(this.props.product)} disabled={this.props.product.selected}>Buy</Button>\n            </div>\n        );\n    }\n}\n\nexport default Product;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/contactsMailForm.jsx",["285"],"import React from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport {FormLabel} from \"react-bootstrap\";\n\nfunction ContactsMailForm(props) {\n    return (\n        <div>\n            <Form onSubmit={props.onSubmit}>\n                <FormGroup>\n                    <FormLabel>Full name</FormLabel>\n                    <FormControl\n                    id=\"fullname\"\n                    name=\"fullname\"\n                    value={props.fullname}\n                    type=\"text\"\n                    placeholder=\"Please enter your full name\"\n                    onChange={props.onChange}/>\n                    {props.errors.fullname &&\n                    <p className=\"alert alert-danger\">{props.errors.fullname}</p>}\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl\n                    id=\"email\"\n                    name=\"email\"\n                    value={props.email}\n                    type=\"email\"\n                    placeholder=\"Please enter your email\"\n                    onChange={props.onChange}/>\n                    {props.errors.email &&\n                    <p className=\"alert alert-danger\">{props.errors.email}</p>}\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Subject</FormLabel>\n                    <FormControl\n                    id=\"subject\"\n                    name=\"subject\"\n                    value={props.subject}\n                    type=\"text\"\n                    placeholder=\"Please enter the email subject\"\n                    onChange={props.onChange}/>\n                    {props.errors.subject &&\n                    <p className=\"alert alert-danger\">{props.errors.subject}</p>}\n                </FormGroup>\n                <FormGroup>\n                    <FormLabel>Message</FormLabel>\n                    <FormControl\n                    id=\"message\"\n                    name=\"message\"\n                    value={props.message}\n                    as=\"textarea\"\n                    placeholder=\"Please enter your message\"\n                    onChange={props.onChange}/>\n                    {props.errors.message &&\n                    <p className=\"alert alert-danger\">{props.errors.message}</p>}\n                </FormGroup>\n                <Row className=\"m-0\">\n                    <Button\n                    type=\"submit\"\n                    disabled={props.isDisabled}>SEND MESSAGE</Button>\n                </Row>\n                {props.Recaptcha}\n            </Form>\n        </div>\n    );\n}\n\nexport default ContactsMailForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/userDeleteAlert.jsx",["286","287","288"],"import React, {useState} from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from \"react-bootstrap/Button\";\nimport {Fade} from \"react-bootstrap\";\nimport {Transition} from \"react-transition-group\";\nimport Row from \"react-bootstrap/Row\";\n\n\nfunction UserDeleteAlert(props) {\n\n    return (\n        <React.Fragment>\n            <Alert style={{width:'40rem'}} show={props.showAlert} variant={props.variant} className=\"text-center\">\n                <Alert.Heading>{props.heading}</Alert.Heading>\n                <hr/>\n                <Row className=\"justify-content-around\">\n                <Button onClick={props.onYes} variant={props.buttonYesVariant}>{props.buttonYes}</Button>\n                <Button onClick={props.onNo} variant={props.buttonNoVariant}>{props.buttonNo}</Button>\n                </Row>\n            </Alert>\n        </React.Fragment>\n    );\n}\n\nexport default UserDeleteAlert;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/usercard.jsx",["289"],"import React from 'react';\nimport Card from \"react-bootstrap/Card\";\nimport {CardImg} from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Usercard(props) {\n    return (\n        <React.Fragment>\n            <Card className={props.className}>\n                <Card.Header>\n                    <CardImg src={props.src} style={{width: props.imgWidth}}/>\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>{props.loggedUser.userName} {props.loggedUser.userFamily}</Card.Title>\n                    <Card.Subtitle>e-mail : {props.loggedUser.userEmail}</Card.Subtitle>\n                    <Card.Text>address : {props.loggedUser.userAddress}</Card.Text>\n                    <Card.Subtitle>telephone : {props.loggedUser.userTelephone}</Card.Subtitle>\n                </Card.Body>\n            </Card>\n        </React.Fragment>\n    );\n}\n\nexport default Usercard;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/imagesUploadForm.jsx",["290","291","292","293","294"],"import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport FormLabel from \"react-bootstrap/FormLabel\";\n\nfunction ImagesUploadForm(props) {\n    return (\n        <div>\n            <Form>\n                <FormLabel htmlFor=\"images\">\n                    Upload images :\n                </FormLabel>\n                <Form.File\n                type=\"file\"\n                id=\"images\"\n                name=\"images\"\n                label=\"Max images to upload : 5\"\n                multiple\n                onChange={props.onChange}/>\n            </Form>\n        </div>\n    );\n}\n\nexport default ImagesUploadForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/emails/allEmailsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/trTdTable.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/navLinkComp.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/user/updateUserFormUsr.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/registerBioForm.jsx",["295","296","297"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {createBio} from \"../../services/bioService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/bios/bioRegister.css\";\n\nclass RegisterBioForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bioTitle: '',\n            bioText: '',\n            bioPictures: [],\n            errors: {},\n            isDisabled: true,\n            showPictures: [],\n            uploadPictures: null\n        }\n    }\n\n    schema = Joi.object({\n        bioTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Bio title'),\n        bioText: Joi.string()\n            .required()\n            .min(10)\n            .max(1024)\n            .trim(true)\n            .label('Bio text'),\n        bioPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Bio pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBioInput();\n        this.setState({errors: errors || {}});\n        console.log(errors);\n        if (errors) return;\n\n        const bio = {\n            bioTitle: this.state.bioTitle,\n            bioText: this.state.bioText,\n            bioPictures: this.state.bioPictures\n        }\n        await createBio(bio);\n        toast('New Bio was successfully created!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-bio-toaster'\n        });\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            this.setState({\n                isDisabled: true\n            });\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'register-bio-toaster'\n            });\n        }\n        console.log(this.state);\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const showFiles = [];\n            const bioFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                bioFiles.push(event.target.files[i].name);\n            }\n            this.setState({\n                bioPictures: bioFiles,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        });\n    }\n\n\n    maxSelectedFiles = (event) => {\n\n        let files = event.target.files;\n        if (files.length > 3) {\n            toast(\"Only 3 images can be uploaded at a time\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-bio-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateBioInput = () => {\n        const bio = {\n            bioTitle: this.state.bioTitle,\n            bioText: this.state.bioText,\n            bioPictures: this.state.bioPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(bio, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-bio-main-container\" fluid={true}>\n                    <Container className=\"register-bio-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"register-bio-span\">Create new Biography :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-bio-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={sp}/>\n                                                )\n                                            })\n                                            }\n                                        </Row>\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            {/*<FormLabel htmlFor=\"images\">*/}\n                                            {/*    Upload images :*/}\n                                            {/*</FormLabel>*/}\n                                            <Form.File\n                                                className=\"register-bio-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"images\"\n                                                label={this.state.errors.bioPictures && \"You need to select images to upload!\"\n                                                || \"Maximum images allowed to upload : 3\"}\n                                                multiple\n                                                onChange={this.handleImages}\n                                            />\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.bioTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioTitle}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"register-bio-form-control\"\n                                                autoFocus={true}\n                                                name=\"bioTitle\"\n                                                type=\"text\"\n                                                value={this.state.bioTitle}\n                                                placeholder=\"Enter title for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.bioText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioText}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"register-bio-form-control\"\n                                                name=\"bioText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.bioText}\n                                                placeholder=\"Enter text for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-bio-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    CREATE BIOGRAPHY\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-bio-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterBioForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/bioService.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/allBiosList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/bios/updateBioForm.jsx",["298"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getBio, updateBio} from \"../../services/bioService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/bios/bioUpdate.css\";\n\nclass UpdateBioForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            bio: {\n                bioTitle: '',\n                bioText: '',\n                bioPictures: []\n            },\n            showPictures: null,\n            uploadPictures: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        bioTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Bio title'),\n        bioText: Joi.string()\n            .required()\n            .min(10)\n            .max(1024)\n            .trim(true)\n            .label('Bio text'),\n        bioPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Bio pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBioInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-bio-toaster'\n            });\n        }\n\n        const bio = {\n            bioTitle: this.state.bio.bioTitle,\n            bioText: this.state.bio.bioText,\n            bioPictures: this.state.bio.bioPictures\n        }\n        toast('Biography update was successful!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-bio-toaster'\n        });\n        await updateBio(bio, this.state.bio._id);\n\n        this.setState({\n            isDisabled: true\n        });\n\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const bio = {...this.state.bio};\n            const name = event.target.name;\n            const showFiles = [];\n            const bioFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                bioFiles.push(event.target.files[i].name);\n            }\n            bio[name] = bioFiles;\n            this.setState({\n                bio,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n    maxSelectedFiles = (event) => {\n\n        let files = event.target.files;\n        if (files.length > 3) {\n            toast(\"Only 3 images can be uploaded at a time\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-bio-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    handleChange = (event) => {\n        const bio = {...this.state.bio};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        bio[name] = value;\n        this.setState({\n            bio,\n            isDisabled: false\n        });\n    }\n\n\n    async componentDidMount() {\n        await this.populateBio();\n        console.log(this.state.bio);\n    }\n\n\n    async populateBio() {\n        try {\n            const bioId = this.props.match.params.id;\n            const {data: bio} = await getBio(bioId);\n            this.setState({\n                bio: this.mapToViewModel(bio)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Bio with the given ID');\n        }\n    }\n\n\n    mapToViewModel(bio) {\n        return {\n            _id: bio._id,\n            bioTitle: bio.bioTitle,\n            bioText: bio.bioText,\n            bioPictures: bio.bioPictures\n        }\n    }\n\n\n    validateBioInput = () => {\n        const bio = {\n            _id: this.state.bio._id,\n            bioTitle: this.state.bio.bioTitle,\n            bioText: this.state.bio.bioText,\n            bioPictures: this.state.bio.bioPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(bio, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/bioslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-bio-main-container\" fluid={true}>\n                    <Container className=\"update-bio-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-bio-span\">Update Biography :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-bio-div-form\">\n\n                                    {/*{this.state.showPictures === null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Current bio pictures :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    {/*{this.state.showPictures !== null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Updated bio pictures waiting for upload :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    <Form onSubmit={this.handleSubmit}>\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.bio.bioPictures.map(bp => {\n                                                return (\n                                                    <CardImg\n                                                        key={bp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={picUrl + bp}/>\n                                                )\n                                            })}\n                                        </Row>\n                                        }\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300,height:300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>\n                                        }\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"update-bio-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"bioPictures\"\n                                                label=\"Maximum images allowed to upload : 3\"\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.bioTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioTitle}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-bio-form-control\"\n                                                autoFocus={true}\n                                                name=\"bioTitle\"\n                                                type=\"text\"\n                                                value={this.state.bio.bioTitle}\n                                                placeholder=\"Enter title for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.bioText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.bioText}\n                                            </FormLabel>}\n                                            <FormControl\n                                                className=\"update-bio-form-control\"\n                                                name=\"bioText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.bio.bioText}\n                                                placeholder=\"Enter text for the Biography\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-bio-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE BIOGRAPHY\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-bio-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO BIOS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateBioForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/registerBlogForm.jsx",["299"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {createBlog} from \"../../services/blogService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/blogs/blogRegister.css\"\n\nclass RegisterBlogForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blogTitle: '',\n            blogSubTitle: '',\n            blogText: '',\n            blogPictures: [],\n            blogLink: '',\n            errors: {},\n            isDisabled: true,\n            showPictures: [],\n            uploadPictures: null\n        }\n    }\n\n    schema = Joi.object({\n        blogTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Blog title'),\n        blogSubTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(200)\n            .trim(true)\n            .label('Blog sub title'),\n        blogText: Joi.string()\n            .required()\n            .min(20)\n            .max(5000)\n            .trim(true)\n            .label('Blog text'),\n        blogPictures: Joi.array()\n            .items(Joi.string())\n            .allow('')\n            .label('Blog pictures'),\n        blogLink: Joi.string()\n            .min(5)\n            .max(50)\n            .allow('')\n            .label('Blog link')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBlogInput();\n        this.setState({\n            errors: errors || {}\n        });\n        console.log(errors);\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'register-blog-toaster'\n            });\n        }\n\n        const blog = {\n            blogTitle: this.state.blogTitle,\n            blogSubTitle: this.state.blogSubTitle,\n            blogText: this.state.blogText,\n            blogPictures: this.state.blogPictures,\n            blogLink: this.state.blogLink\n        }\n        await createBlog(blog);\n        toast.success(\"New Blog was successfully created!\", {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-blog-toaster'\n        });\n\n        this.setState({\n            isDisabled: true\n        });\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const showFiles = [];\n            const blogFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                blogFiles.push(event.target.files[i].name);\n            }\n            this.setState({\n                blogPictures: blogFiles,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        });\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 5) {\n            toast.error(\"Only 5 images can be uploaded at a time!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-blog-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateBlogInput = () => {\n        const blog = {\n            blogTitle: this.state.blogTitle,\n            blogSubTitle: this.state.blogSubTitle,\n            blogText: this.state.blogText,\n            blogPictures: this.state.blogPictures,\n            blogLink: this.state.blogLink\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(blog, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-blog-main-container\" fluid={true}>\n                    <Container className=\"register-blog-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"register-blog-span\">Create new Blog :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-blog-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>\n\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"register-blog-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"images\"\n                                                label={this.state.errors.blogPictures\n                                                || \"Maximum images allowed to upload : 5 (not mandatory)\"}\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.blogTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                autoFocus={true}\n                                                name=\"blogTitle\"\n                                                type=\"text\"\n                                                value={this.state.blogTitle}\n                                                placeholder=\"Enter title for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogSubTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogSubTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogSubTitle\"\n                                                type=\"text\"\n                                                value={this.state.blogSubTitle}\n                                                placeholder=\"Enter short expose for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.blogText}\n                                                placeholder=\"Enter main text for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogLink &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogLink}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogLink\"\n                                                type=\"text\"\n                                                value={this.state.blogLink}\n                                                placeholder=\"Enter link to additional info (not mandatory)\"\n                                                onChange={this.handleChange}\n                                            />\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-blog-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    CREATE BLOG\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-blog-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterBlogForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/blogService.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/allBlogsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/blogs/updateBlogForm.jsx",["300"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getBlog, updateBlog} from \"../../services/blogService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/blogs/blogUpdate.css\";\n\nclass UpdateBlogForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blog: {\n                blogTitle: '',\n                blogSubTitle: '',\n                blogText: '',\n                blogPictures: [],\n                blogLink: ''\n            },\n            showPictures: null,\n            uploadPictures: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        blogTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Blog title'),\n        blogSubTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(200)\n            .trim(true)\n            .label('Blog sub title'),\n        blogText: Joi.string()\n            .required()\n            .min(20)\n            .max(5000)\n            .trim(true)\n            .label('Blog text'),\n        blogPictures: Joi.array()\n            .items(Joi.string())\n            .allow('')\n            .label('Blog pictures'),\n        blogLink: Joi.string()\n            .min(5)\n            .max(50)\n            .allow('')\n            .label('Blog link')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateBlogInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-blog-toaster'\n            });\n        }\n\n        const blog = {\n            blogTitle: this.state.blog.blogTitle,\n            blogSubTitle: this.state.blog.blogSubTitle,\n            blogText: this.state.blog.blogText,\n            blogPictures: this.state.blog.blogPictures,\n            blogLink: this.state.blog.blogLink\n        }\n        toast('Blog update was successful', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-blog-toaster'\n        });\n        this.setState({\n            isDisabled: true\n        });\n        await updateBlog(blog, this.state.blog._id);\n\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const blog = {...this.state.blog};\n            const name = event.target.name;\n            const showFiles = [];\n            const blogFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n                blogFiles.push(event.target.files[i].name);\n            }\n            blog[name] = blogFiles;\n            this.setState({\n                blog,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const blog = {...this.state.blog};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        blog[name] = value;\n\n        this.setState({\n            blog,\n            isDisabled: false\n        });\n    }\n\n\n    async componentDidMount() {\n        await this.populateBlog();\n        console.log(this.state.blog);\n    }\n\n\n    async populateBlog() {\n        try {\n            const blogId = this.props.match.params.id;\n            const {data: blog} = await getBlog(blogId);\n            this.setState({\n                blog: this.mapToViewModel(blog)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Blog with the given ID');\n        }\n    }\n\n\n    mapToViewModel(blog) {\n        return {\n            _id: blog._id,\n            blogTitle: blog.blogTitle,\n            blogSubTitle: blog.blogSubTitle,\n            blogText: blog.blogText,\n            blogPictures: blog.blogPictures,\n            blogLink: blog.blogLink\n        }\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 5) {\n            toast(\"Only 5 images can be uploaded at a time!\", {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-blog-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateBlogInput = () => {\n        const blog = {\n            _id: this.state.blog._id,\n            blogTitle: this.state.blog.blogTitle,\n            blogSubTitle: this.state.blog.blogSubTitle,\n            blogText: this.state.blog.blogText,\n            blogPictures: this.state.blog.blogPictures,\n            blogLink: this.state.blog.blogLink\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(blog, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/blogslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-blog-main-container\" fluid={true}>\n                    <Container className=\"update-blog-sub-container\">\n                        <Row className=\"m-0\">\n                            <span className=\"update-blog-span\">Update Blog :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-bio-div-form\">\n\n                                    {/*{this.state.showPictures === null &&*/}\n                                    {/*<Card.Header className=\"update-blog-span m-0\">*/}\n                                    {/*    <span>Current blog pictures :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    {/*{this.state.showPictures !== null &&*/}\n                                    {/*<Card.Header>*/}\n                                    {/*    <span>Updated blog pictures waiting for upload :</span>*/}\n                                    {/*</Card.Header>}*/}\n\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.blog.blogPictures.map(bp => {\n                                                return (\n                                                    <CardImg\n                                                        key={bp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={picUrl + bp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"register-blog-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"blogPictures\"\n                                                label={this.state.errors.blogPictures\n                                                || \"Maximum images allowed to upload : 5 (not mandatory)\"}\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.blogTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                autoFocus={true}\n                                                name=\"blogTitle\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogTitle}\n                                                placeholder=\"Enter title for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogSubTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogSubTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogSubTitle\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogSubTitle}\n                                                placeholder=\"Enter short expose for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogText\"\n                                                as=\"textarea\"\n                                                rows=\"5\"\n                                                value={this.state.blog.blogText}\n                                                placeholder=\"Enter main text for the Blog\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.blogLink &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.blogLink}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-blog-form-control\"\n                                                name=\"blogLink\"\n                                                type=\"text\"\n                                                value={this.state.blog.blogLink}\n                                                placeholder=\"Enter link to additional info (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-blog-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE BLOG\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-blog-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO BLOGS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateBlogForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blog.jsx",["301","302"],"/home/asen/Workspace/momoDesignSite/momo-site/src/pages/blog/blogDetails.jsx",["303","304","305"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Joi from \"joi\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport {toast} from \"react-toastify\";\nimport {getBlog} from \"../../services/blogService\";\nimport {picUrl} from \"../../config.json\";\nimport {createComment, getCommentsByBlog} from \"../../services/commentService\";\nimport BlogCard from \"../../components/blogCard\";\nimport Image from 'react-bootstrap/Image'\nimport BlogComments from \"../../components/blogComments\";\nimport {getCurrentUser} from \"../../services/userLoginService\";\nimport jwtDecode from \"jwt-decode\";\n\nclass BlogDetails extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            blog: '',\n            comments: [],\n            comment: {\n                commentText: '',\n                userId: '',\n                blogId: ''\n            },\n            user: null,\n            errors: {},\n            isDisabled: true\n        }\n    }\n\n    schema = Joi.object({\n        commentText: Joi.string()\n            .min(10)\n            .max(1000)\n            .required(),\n        userId: Joi.string()\n            .required(),\n        blogId: Joi.string()\n            .required()\n    })\n\n\n    async componentDidMount() {\n        const blogId = this.props.match.params.id;\n        const {data: blog} = await getBlog(blogId);\n        const {data: comments} = await getCommentsByBlog(blogId);\n        const jwtUser = getCurrentUser();\n        if (jwtUser !== null) {\n            const user = jwtDecode(jwtUser);\n            this.setState({user});\n            console.log(user);\n        }\n        this.setState({\n            blog,\n            comments\n        });\n\n        console.log(this.state.user);\n    }\n\n    handleKeyPress = async (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            const errors = this.validateCommentInput();\n            this.setState({errors: errors || {}});\n            if (errors) return;\n\n            const comment = {\n                commentText: this.state.comment.commentText,\n                userId: this.state.user._id,\n                blogId: this.props.match.params.id\n            };\n            await createComment(comment);\n            toast.success('Your comment was successfully posted');\n\n            const blogId = this.props.match.params.id;\n            const {data: comments} = await getCommentsByBlog(blogId);\n\n            const emptyComment = {\n                commentText: '',\n                userId: '',\n                blogId: ''\n            }\n\n            this.setState({\n                comments,\n                comment: emptyComment\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const comment = {};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        comment [name] = value;\n        this.setState({\n            comment\n        })\n    }\n\n\n    validateCommentInput = () => {\n        const blogId = this.props.match.params.id;\n        const comment = {\n            commentText: this.state.comment.commentText,\n            userId: this.state.user._id,\n            blogId: blogId\n        }\n        const options = {abortEarly: false};\n        const result = this.schema.validate(comment, options);\n        console.log(result);\n\n        if (!result.error) return null;\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    registerRedirect = () => {\n        this.props.history.push(\"/userlogin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"container\" fluid={true}>\n                    <Row>\n                        <Col>\n                            <BlogCard\n                                items={this.state.blog}/>\n                        </Col>\n                    </Row>\n                    {!this.state.user &&\n                    <Row>\n                        <Col className=\"d-flex flex-row-reverse\">\n                            <Button\n                                onClick={this.registerRedirect}>\n                                Leave a comment\n                            </Button>\n                        </Col>\n                    </Row>}\n                    {this.state.user &&\n                    <Row>\n                        <Col>\n                            <Card>\n                                <Card.Body className=\"d-flex flex-row\">\n                                    <Image\n                                        src={picUrl + this.state.user.userPicture}\n                                        style={{width: '5rem', height: '5rem'}}\n                                        roundedCircle/>\n                                    <Col>\n                                        <Form onKeyPress={this.handleKeyPress}>\n                                            <FormGroup>\n                                                <FormControl\n                                                    autoFocus={true}\n                                                    name=\"commentText\"\n                                                    as=\"textarea\"\n                                                    rows=\"3\"\n                                                    value={this.state.comment.commentText}\n                                                    placeholder=\"You can leave your comment here...\"\n                                                    onChange={this.handleChange}/>\n                                                {this.state.errors.commentText &&\n                                                <p className=\"text-danger pt-2\">\n                                                    {this.state.errors.commentText}\n                                                </p>}\n                                            </FormGroup>\n                                        </Form>\n                                    </Col>\n                                </Card.Body>\n                            </Card>\n                        </Col>\n                    </Row>}\n                    {this.state.comments &&\n                    <Row>\n                        <Col>\n                            <BlogComments\n                                comments={this.state.comments}\n                            />\n                        </Col>\n                    </Row>}\n                </Container>\n            </div>\n        );\n    }\n};\n\nexport default BlogDetails;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/commentService.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogCard.jsx",["306"],"import React from 'react';\nimport Row from \"react-bootstrap/Row\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../config.json\";\n\n\nfunction BlogCard(props) {\n\n    const {items} = props;\n    return (\n        <React.Fragment>\n            <Card>\n                <Card.Header>\n                    Date : {new Date(items.blogDate).toLocaleString()}\n                </Card.Header>\n                <Card.Body>\n                    <Card.Title>\n                        {items.blogTitle}\n                    </Card.Title>\n                    {items.blogPictures &&\n                    <Row className=\"justify-content-center\">\n                        {items.blogPictures.map(bp => {\n                            return (\n                                <CardImg\n                                    key={bp}\n                                    className=\"m-2\"\n                                    style={{width: '20rem'}}\n                                    src={picUrl + bp}/>\n                            )\n                        })}\n                    </Row>}\n                    <Card.Text>\n                        {items.blogText}\n                    </Card.Text>\n                </Card.Body>\n                {items.blogLink &&\n                <Card.Footer>\n                    <Link to={items.blogLink}>\n                        Additional info you can find interesting : {items.blogLink}\n                    </Link>\n                </Card.Footer>}\n            </Card>\n        </React.Fragment>\n    );\n}\n\nexport default BlogCard;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/components/blogComments.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/comments/AllCommentsList.jsx",["307"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport {Button, Image} from \"react-bootstrap\";\nimport {toast, Zoom} from \"react-toastify\";\nimport _ from \"lodash\";\nimport {deleteComment, getComments} from \"../../services/commentService\";\nimport \"../../css/admin/comments/commentAllList.css\";\nimport Paginate from \"../../components/paginate\";\nimport {paginateFunction} from \"../../services/paginateFunction\";\nimport DropDownComp from \"../../components/DropDownComp\";\n\nclass AllCommentsList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: [],\n            emailsList: [],\n            selectedEmail: 'ALL USERS COMMENTS',\n            commentsPerPage: 5,\n            currentPage: 1\n        }\n    }\n\n\n    async componentDidMount() {\n        const {data: comments} = await getComments();\n        //Creating new array with objects by unique 'userEmail\n        const uniqList = _.uniqBy(comments, 'user.userEmail');\n        const emailsList = [{user: {userEmail: 'ALL USERS COMMENTS'}}, ...uniqList];\n        console.log(emailsList);\n        this.setState({\n            comments,\n            emailsList\n        });\n    }\n\n\n    handleDelete = async (comment) => {\n        const allComments = this.state.comments;\n        const comments = allComments.filter(c => c._id !== comment._id);\n        this.setState({comments});\n        try {\n            await deleteComment(comment._id);\n            toast('Comment was successfully deleted!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'commentlist-toaster'\n            });\n        } catch (e) {\n            if (e.response && e.response.status === 404) console.log('Comment with given ID was not found!');\n            toast.error('This comment has already been deleted!');\n            this.setState({\n                comments: allComments\n            });\n        }\n\n    }\n\n    handleEmailSort = (email) => {\n        this.setState({\n            selectedEmail: email,\n            currentPage: 1\n        })\n    }\n\n    handlePageChange = (pageNumber) => {\n        this.setState({\n            currentPage: pageNumber\n        });\n    }\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n    render() {\n\n        //If selectedEmail is true then apply filter where userEmail property is equal to selectedEmail property\n        //We are checking for the userEmail and id property because ALL USERS object don't have ID so we can\n        //Render all the user comments.\n        const filteredByEmail = this.state.selectedEmail && this.state.selectedEmail._id\n            ? this.state.comments.filter(e => e.user.userEmail === this.state.selectedEmail.userEmail)\n            : this.state.comments;\n\n        const paginatedComments = paginateFunction(filteredByEmail, this.state.commentsPerPage, this.state.currentPage);\n\n        console.log(this.state.selectedEmail);\n\n        return (\n            <div>\n                <Container className=\"commentlist-main-container\" fluid={true}>\n                    <Container className=\"commentlist-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <Col className=\"commentlist-span-col\">\n                                <span className=\"commentlist-span\">All users Comments :</span>\n                            </Col>\n                            <Col className=\"commentlist-span-col d-flex justify-content-end\">\n                                <Paginate\n                                    className=\"m-0\"\n                                    itemsCount={filteredByEmail.length}\n                                    itemsPerPage={this.state.commentsPerPage}\n                                    currentPage={this.state.currentPage}\n                                    onPageChange={this.handlePageChange}/>\n                            </Col>\n                        </Row>\n                        <Table responsive hover className=\"commentlist-table\">\n                            <thead className=\"commentlist-thead\">\n                            <tr>\n                                <th>User</th>\n                                <th>Email</th>\n                                <th>Comment</th>\n                                <th>Date</th>\n                                <th>Delete</th>\n                            </tr>\n                            </thead>\n                            <tbody className=\"commentlist-tbody\">\n                            {paginatedComments.map(comment => {\n                                return (\n                                    <tr key={comment._id}>\n                                        <td>{comment.user.userName} {comment.user.userFamily}</td>\n                                        <td>{comment.user.userEmail}</td>\n                                        <td>\n                                            <div\n                                                className=\"overflow-auto\"\n                                                style={{height: 150}}>\n                                                {comment.commentText}\n                                            </div>\n                                        </td>\n                                        <td>{new Date(comment.commentDate).toLocaleString()}</td>\n                                        <td>\n                                            <Button\n                                                className=\"commentlist-delete-button\"\n                                                onClick={() => this.handleDelete(comment)}>\n                                                Delete\n                                            </Button>\n                                        </td>\n                                    </tr>\n                                )\n                            })}\n                            </tbody>\n                        </Table>\n                        <Row>\n                            <Col>\n                                <Button\n                                    className=\"commentlist-redirect-button\"\n                                    onClick={this.adminRedirect}>\n                                    BACK TO ADMIN PANEL\n                                </Button>\n                            </Col>\n                            <Col className=\"d-flex justify-content-end\">\n                                <DropDownComp\n                                    items={this.state.emailsList}\n                                    valueProperty=\"userEmail\"\n                                    textProperty=\"userEmail\"\n                                    selectedItem={this.state.selectedEmail}\n                                    onSelectDropDown={this.handleEmailSort}/>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default AllCommentsList;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/registerDesignForm.jsx",["308","309","310"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport {createDesign} from \"../../services/designService\";\nimport \"../../css/admin/designs/designRegister.css\"\n\nclass RegisterDesignForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            designTitle: '',\n            designText: '',\n            designPictures: '',\n            errors: {},\n            isDisabled: true,\n            showPictures: [],\n            uploadPictures: null\n        }\n    }\n\n    schema = Joi.object({\n        designTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Design title'),\n        designText: Joi.string()\n            .allow('')\n            .min(10)\n            .max(200)\n            .trim(true)\n            .label('Design text'),\n        designPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Design pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateDesignInput();\n        this.setState({\n            errors: errors || {}\n        });\n        console.log(errors);\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'register-design-toaster'\n            });\n        }\n\n        const design = {\n            designTitle: this.state.designTitle,\n            designText: this.state.designText,\n            designPictures: this.state.designPictures\n        }\n        await createDesign(design);\n        toast('New Design was successfully created!', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'register-design-toaster'\n        });\n\n        this.setState({\n            isDisabled: true\n        });\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const designFiles = [];\n            const showFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                designFiles.push(event.target.files[i].name);\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n            }\n            this.setState({\n                designPictures: designFiles,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value,\n            isDisabled: false\n        })\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 20) {\n            toast('Only 20 images can be uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-design-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n    validateDesignInput = () => {\n        const design = {\n            designTitle: this.state.designTitle,\n            designText: this.state.designText,\n            designPictures: this.state.designPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(design, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"register-design-main-container\" fluid={true}>\n                    <Container className=\"register-design-sub-container container\">\n                        <Row className=\"m-0\">\n                            <span className=\"register-design-span\">Create new Design :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"register-design-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>\n\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"register-design-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"images\"\n                                                label={this.state.errors.designPictures && \"You need to select images to upload!\"\n                                                || \"Maximum images allowed to upload : 20\"}\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.designTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-design-form-control\"\n                                                autoFocus={true}\n                                                name=\"designTitle\"\n                                                type=\"text\"\n                                                value={this.state.designTitle}\n                                                placeholder=\"Enter title for the Design\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.designText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"register-design-form-control\"\n                                                name=\"designText\"\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={this.state.designText}\n                                                placeholder=\"Enter text for the Design (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"register-design-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    CREATE DESIGN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"register-design-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO ADMIN PANEL\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default RegisterDesignForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/designService.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/allDesignsList.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/admin/designs/updateDesignForm.jsx",["311"],"import React, {Component} from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Joi from \"joi\";\nimport {toast, Zoom} from \"react-toastify\";\nimport {FormLabel} from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport CardImg from \"react-bootstrap/CardImg\";\nimport {picUrl} from \"../../config.json\";\nimport {getDesign, updateDesign} from \"../../services/designService\";\nimport {uploadImageAdmin} from \"../../services/imgService\";\nimport \"../../css/admin/designs/designUpdate.css\";\n\nclass UpdateDesignForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            design: {\n                designTitle: '',\n                designText: '',\n                designPictures: []\n            },\n            errors: {},\n            isDisabled: true,\n            uploadPictures: null,\n            showPictures: null\n        }\n    }\n\n\n    schema = Joi.object({\n        _id: Joi.string(),\n        designTitle: Joi.string()\n            .required()\n            .min(5)\n            .max(100)\n            .trim(true)\n            .label('Design title'),\n        designText: Joi.string()\n            .allow('')\n            .min(10)\n            .max(100)\n            .trim(true)\n            .label('Design text'),\n        designPictures: Joi.array()\n            .items(Joi.string().required())\n            .required()\n            .label('Design pictures')\n    })\n\n\n    handleSubmit = async (event) => {\n        event.preventDefault();\n        const errors = this.validateDesignInput();\n        this.setState({errors: errors || {}});\n        if (errors) return;\n\n        if (this.state.uploadPictures !== null) {\n            const data = new FormData();\n            for (let i = 0; i < this.state.uploadPictures.length; i++) {\n                data.append('file', this.state.uploadPictures[i]);\n            }\n            await uploadImageAdmin(data);\n            toast('Images were successfully uploaded!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'update-design-toaster'\n            });\n        }\n\n        const design = {\n            designTitle: this.state.design.designTitle,\n            designText: this.state.design.designText,\n            designPictures: this.state.design.designPictures\n        }\n        toast('Design update was successful', {\n            position: \"top-center\",\n            transition: Zoom,\n            className: 'update-design-toaster'\n        });\n        this.setState({\n            isDisabled: true\n        });\n        await updateDesign(design, this.state.design._id);\n    }\n\n\n    handleImages = (event) => {\n\n        if (this.maxSelectedFiles(event)) {\n            const design = {...this.state.design};\n            const name = event.target.name;\n            const designFiles = [];\n            const showFiles = [];\n            for (let i = 0; i < event.target.files.length; i++) {\n                designFiles.push(event.target.files[i].name);\n                showFiles.push(URL.createObjectURL(event.target.files[i]));\n            }\n            design[name] = designFiles;\n            this.setState({\n                design,\n                showPictures: showFiles,\n                uploadPictures: event.target.files,\n                isDisabled: false\n            });\n        }\n    }\n\n\n    handleChange = (event) => {\n        const design = {...this.state.design};\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        design[name] = value;\n        this.setState({\n            design,\n            isDisabled: false\n        })\n    }\n\n\n    async componentDidMount() {\n        await this.populateDesign();\n        console.log(this.state.design);\n    }\n\n\n    async populateDesign() {\n        try {\n            const designId = this.props.match.params.id;\n            const {data: design} = await getDesign(designId);\n            this.setState({\n                design: this.mapToViewModel(design)\n            });\n        } catch (e) {\n            if (e.response && e.response === 404)\n                console.log('There is no Design with the given ID');\n        }\n    }\n\n\n    mapToViewModel(design) {\n        return {\n            _id: design._id,\n            designTitle: design.designTitle,\n            designText: design.designText,\n            designPictures: design.designPictures\n        }\n    }\n\n\n    maxSelectedFiles = (event) => {\n        let files = event.target.files;\n        if (files.length > 20) {\n            toast('Only 20 images can be uploaded at a time!', {\n                position: \"top-center\",\n                transition: Zoom,\n                className: 'error-design-toaster'\n            });\n            event.target.value = null;\n            return false;\n        }\n        return true;\n    }\n\n\n    validateDesignInput = () => {\n        const design = {\n            _id: this.state.design._id,\n            designTitle: this.state.design.designTitle,\n            designText: this.state.design.designText,\n            designPictures: this.state.design.designPictures\n        };\n        const options = {abortEarly: false};\n        const result = this.schema.validate(design, options);\n\n        if (!result.error) return null;\n\n        const errors = {};\n        for (let item of result.error.details)\n            errors[item.path[0]] = item.message;\n        return errors;\n    }\n\n\n    adminRedirect = () => {\n        this.props.history.push(\"/admin/designslist\");\n    }\n\n\n    render() {\n        return (\n            <div>\n                <Container className=\"update-design-main-container\" fluid={true}>\n                    <Container className=\"update-design-sub-container container\" fluid={true}>\n                        <Row className=\"m-0\">\n                            <span className=\"update-design-span\">Update Design :</span>\n                        </Row>\n                        <Row>\n                            <Col>\n                                <div className=\"update-design-div-form\">\n                                    <Form onSubmit={this.handleSubmit}>\n\n                                        {this.state.showPictures === null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.design.designPictures.map(dp => {\n                                                return (\n                                                    <CardImg\n                                                        key={dp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={picUrl + dp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        {this.state.showPictures !== null &&\n                                        <Row className=\"justify-content-center\">\n                                            {this.state.showPictures.map(sp => {\n                                                return (\n                                                    <CardImg\n                                                        key={sp}\n                                                        className=\"mt-5 m-3\"\n                                                        style={{width: 300, height: 300}}\n                                                        src={sp}/>\n                                                )\n                                            })}\n                                        </Row>}\n\n                                        <FormGroup className=\"px-5 pt-5\">\n                                            <Form.File\n                                                className=\"update-design-form\"\n                                                type=\"file\"\n                                                id=\"images\"\n                                                name=\"designPictures\"\n                                                label=\"Maximum images allowed to upload : 20\"\n                                                multiple\n                                                onChange={this.handleImages}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-3\">\n                                            {this.state.errors.designTitle &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designTitle}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"update-design-form-control\"\n                                                autoFocus={true}\n                                                name=\"designTitle\"\n                                                type=\"text\"\n                                                value={this.state.design.designTitle}\n                                                placeholder=\"Enter title for the Design\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <FormGroup className=\"px-5 pt-2\">\n                                            {this.state.errors.designText &&\n                                            <FormLabel className=\"text-danger\">\n                                                {this.state.errors.designText}\n                                            </FormLabel>\n                                            }\n                                            <FormControl\n                                                className=\"update-design-form-control\"\n                                                name=\"designText\"\n                                                as=\"textarea\"\n                                                rows=\"3\"\n                                                value={this.state.design.designText}\n                                                placeholder=\"Enter text for the Design (not mandatory)\"\n                                                onChange={this.handleChange}/>\n                                        </FormGroup>\n                                        <Row className=\"px-5 pb-4 py-3 d-flex justify-content-between\">\n                                            <Col md={4}>\n                                                <Button\n                                                    className=\"update-design-register-button\"\n                                                    type=\"submit\"\n                                                    disabled={this.state.isDisabled}>\n                                                    UPDATE DESIGN\n                                                </Button>\n                                            </Col>\n                                            <Col className=\"d-flex justify-content-end\">\n                                                <Button\n                                                    className=\"update-design-redirect-button\"\n                                                    onClick={this.adminRedirect}>\n                                                    BACK TO DESIGNS LIST\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                    </Form>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default UpdateDesignForm;\n","/home/asen/Workspace/momoDesignSite/momo-site/src/services/paginateFunction.js",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/paginate.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/DropDownComp.jsx",[],"/home/asen/Workspace/momoDesignSite/momo-site/src/components/footer.jsx",["312","313","314","315"],{"ruleId":"316","replacedBy":"317"},{"ruleId":"318","replacedBy":"319"},{"ruleId":"320","severity":1,"message":"321","line":2,"column":16,"nodeType":"322","messageId":"323","endLine":2,"endColumn":24},{"ruleId":"320","severity":1,"message":"324","line":7,"column":8,"nodeType":"322","messageId":"323","endLine":7,"endColumn":17},{"ruleId":"320","severity":1,"message":"325","line":2,"column":9,"nodeType":"322","messageId":"323","endLine":2,"endColumn":14},{"ruleId":"320","severity":1,"message":"325","line":2,"column":9,"nodeType":"322","messageId":"323","endLine":2,"endColumn":14},{"ruleId":"320","severity":1,"message":"326","line":7,"column":8,"nodeType":"322","messageId":"323","endLine":7,"endColumn":19},{"ruleId":"320","severity":1,"message":"327","line":17,"column":7,"nodeType":"322","messageId":"323","endLine":17,"endColumn":14},{"ruleId":"320","severity":1,"message":"328","line":6,"column":8,"nodeType":"322","messageId":"323","endLine":6,"endColumn":12},{"ruleId":"320","severity":1,"message":"329","line":7,"column":8,"nodeType":"322","messageId":"323","endLine":7,"endColumn":17},{"ruleId":"320","severity":1,"message":"330","line":8,"column":8,"nodeType":"322","messageId":"323","endLine":8,"endColumn":19},{"ruleId":"320","severity":1,"message":"331","line":9,"column":8,"nodeType":"322","messageId":"323","endLine":9,"endColumn":14},{"ruleId":"320","severity":1,"message":"332","line":10,"column":9,"nodeType":"322","messageId":"323","endLine":10,"endColumn":14},{"ruleId":"333","severity":1,"message":"334","line":59,"column":9,"nodeType":"335","messageId":"336","endLine":59,"endColumn":21,"fix":"337"},{"ruleId":"320","severity":1,"message":"338","line":5,"column":8,"nodeType":"322","messageId":"323","endLine":5,"endColumn":11},{"ruleId":"320","severity":1,"message":"339","line":10,"column":36,"nodeType":"322","messageId":"323","endLine":10,"endColumn":47},{"ruleId":"320","severity":1,"message":"340","line":11,"column":20,"nodeType":"322","messageId":"323","endLine":11,"endColumn":25},{"ruleId":"320","severity":1,"message":"341","line":11,"column":8,"nodeType":"322","messageId":"323","endLine":11,"endColumn":12},{"ruleId":"342","severity":1,"message":"343","line":199,"column":94,"nodeType":"344","messageId":"345","endLine":199,"endColumn":96},{"ruleId":"342","severity":1,"message":"343","line":200,"column":57,"nodeType":"344","messageId":"345","endLine":200,"endColumn":59},{"ruleId":"320","severity":1,"message":"328","line":5,"column":8,"nodeType":"322","messageId":"323","endLine":5,"endColumn":12},{"ruleId":"320","severity":1,"message":"329","line":6,"column":8,"nodeType":"322","messageId":"323","endLine":6,"endColumn":17},{"ruleId":"320","severity":1,"message":"346","line":10,"column":8,"nodeType":"322","messageId":"323","endLine":10,"endColumn":17},{"ruleId":"347","severity":1,"message":"348","line":25,"column":1,"nodeType":"349","endLine":30,"endColumn":3},{"ruleId":"320","severity":1,"message":"325","line":2,"column":9,"nodeType":"322","messageId":"323","endLine":2,"endColumn":14},{"ruleId":"320","severity":1,"message":"350","line":3,"column":9,"nodeType":"322","messageId":"323","endLine":3,"endColumn":23},{"ruleId":"320","severity":1,"message":"351","line":2,"column":9,"nodeType":"322","messageId":"323","endLine":2,"endColumn":24},{"ruleId":"352","severity":1,"message":"353","line":5,"column":5,"nodeType":"354","messageId":"355","endLine":7,"endColumn":6},{"ruleId":"320","severity":1,"message":"338","line":3,"column":8,"nodeType":"322","messageId":"323","endLine":3,"endColumn":11},{"ruleId":"320","severity":1,"message":"356","line":1,"column":16,"nodeType":"322","messageId":"323","endLine":1,"endColumn":24},{"ruleId":"320","severity":1,"message":"357","line":4,"column":9,"nodeType":"322","messageId":"323","endLine":4,"endColumn":13},{"ruleId":"320","severity":1,"message":"358","line":5,"column":9,"nodeType":"322","messageId":"323","endLine":5,"endColumn":19},{"ruleId":"320","severity":1,"message":"331","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":14},{"ruleId":"320","severity":1,"message":"324","line":2,"column":8,"nodeType":"322","messageId":"323","endLine":2,"endColumn":17},{"ruleId":"320","severity":1,"message":"359","line":3,"column":8,"nodeType":"322","messageId":"323","endLine":3,"endColumn":11},{"ruleId":"320","severity":1,"message":"338","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":11},{"ruleId":"320","severity":1,"message":"329","line":6,"column":8,"nodeType":"322","messageId":"323","endLine":6,"endColumn":17},{"ruleId":"320","severity":1,"message":"331","line":7,"column":8,"nodeType":"322","messageId":"323","endLine":7,"endColumn":14},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"342","severity":1,"message":"343","line":193,"column":86,"nodeType":"344","messageId":"345","endLine":193,"endColumn":88},{"ruleId":"342","severity":1,"message":"343","line":194,"column":49,"nodeType":"344","messageId":"345","endLine":194,"endColumn":51},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"320","severity":1,"message":"331","line":6,"column":8,"nodeType":"322","messageId":"323","endLine":6,"endColumn":14},{"ruleId":"320","severity":1,"message":"360","line":8,"column":8,"nodeType":"322","messageId":"323","endLine":8,"endColumn":15},{"ruleId":"320","severity":1,"message":"361","line":9,"column":9,"nodeType":"322","messageId":"323","endLine":9,"endColumn":13},{"ruleId":"320","severity":1,"message":"360","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":15},{"ruleId":"333","severity":1,"message":"334","line":107,"column":9,"nodeType":"335","messageId":"336","endLine":107,"endColumn":23,"fix":"362"},{"ruleId":"320","severity":1,"message":"331","line":4,"column":8,"nodeType":"322","messageId":"323","endLine":4,"endColumn":14},{"ruleId":"320","severity":1,"message":"340","line":6,"column":17,"nodeType":"322","messageId":"323","endLine":6,"endColumn":22},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"342","severity":1,"message":"343","line":191,"column":89,"nodeType":"344","messageId":"345","endLine":191,"endColumn":91},{"ruleId":"342","severity":1,"message":"343","line":192,"column":49,"nodeType":"344","messageId":"345","endLine":192,"endColumn":51},{"ruleId":"320","severity":1,"message":"341","line":12,"column":8,"nodeType":"322","messageId":"323","endLine":12,"endColumn":12},{"ruleId":"320","severity":1,"message":"338","line":2,"column":8,"nodeType":"322","messageId":"323","endLine":2,"endColumn":11},{"ruleId":"320","severity":1,"message":"359","line":3,"column":8,"nodeType":"322","messageId":"323","endLine":3,"endColumn":11},{"ruleId":"320","severity":1,"message":"324","line":4,"column":9,"nodeType":"322","messageId":"323","endLine":4,"endColumn":18},{"ruleId":"320","severity":1,"message":"363","line":7,"column":15,"nodeType":"322","messageId":"323","endLine":7,"endColumn":22},"no-native-reassign",["364"],"no-negated-in-lhs",["365"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'toast' is defined but never used.","'NavLinkComp' is defined but never used.","'navbars' is assigned a value but never used.","'Form' is defined but never used.","'FormGroup' is defined but never used.","'FormControl' is defined but never used.","'Button' is defined but never used.","'Slide' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property name.","MemberExpression","unexpectedWhitespace",{"range":"366","text":"367"},"'Col' is defined but never used.","'loggedAdmin' is defined but never used.","'Image' is defined but never used.","'Card' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'FormLabel' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'getCurrentUser' is defined but never used.","'getCurrentAdmin' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'useState' is defined but never used.","'Fade' is defined but never used.","'Transition' is defined but never used.","'Row' is defined but never used.","'CardImg' is defined but never used.","'Link' is defined but never used.",{"range":"368","text":"367"},"'NavLink' is defined but never used.","no-global-assign","no-unsafe-negation",[1752,1753],"",[3295,3296]]